[{"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 389, "Time": 170.59396719932556}, {"BestPatch": "StmtReplacement({'target': ('LIS.java.xml', 21), 'ingredient': ('LIS.java.xml', 17)})", "Success": true, "FitnessEval": 190, "InvalidPatch": 136, "Time": 69.45759224891663, "BestFitness": 0.0, "diff": "*** before: LIS.java.xml\n--- after: LIS.java.xml\n***************\n*** 28,34 ****\n--- 28,38 ----\n  \n              if (length == longest || val < arr[ends.get(length+1)]) {\n                  ends.put(length+1, i);\n+                 if (length == longest || val < arr[ends.get(length+1)]) {\n+                 ends.put(length+1, i);\n                  longest = length + 1;\n+             }\n+ \n              }\n  \n              i++;\n"}, {"BestPatch": "StmtReplacement({'target': ('LIS.java.xml', 21), 'ingredient': ('LIS.java.xml', 17)})", "Success": true, "FitnessEval": 4, "InvalidPatch": 1, "Time": 2.2725675106048584, "BestFitness": 0.0, "diff": "*** before: LIS.java.xml\n--- after: LIS.java.xml\n***************\n*** 28,34 ****\n--- 28,38 ----\n  \n              if (length == longest || val < arr[ends.get(length+1)]) {\n                  ends.put(length+1, i);\n+                 if (length == longest || val < arr[ends.get(length+1)]) {\n+                 ends.put(length+1, i);\n                  longest = length + 1;\n+             }\n+ \n              }\n  \n              i++;\n"}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 360, "Time": 181.42892265319824}, {"BestPatch": "StmtInsertion({'target': ('LIS.java.xml', 17), 'ingredient': ('LIS.java.xml', 20), 'direction': 'before'})", "Success": true, "FitnessEval": 3, "InvalidPatch": 2, "Time": 1.0917866230010986, "BestFitness": 0.0, "diff": "*** before: LIS.java.xml\n--- after: LIS.java.xml\n***************\n*** 26,32 ****\n  \n              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n  \n!             if (length == longest || val < arr[ends.get(length+1)]) {\n                  ends.put(length+1, i);\n                  longest = length + 1;\n              }\n--- 26,33 ----\n  \n              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n  \n!             ends.put(length+1, i);\n!                 if (length == longest || val < arr[ends.get(length+1)]) {\n                  ends.put(length+1, i);\n                  longest = length + 1;\n              }\n"}, {"BestPatch": "StmtReplacement({'target': ('LIS.java.xml', 21), 'ingredient': ('LIS.java.xml', 17)})", "Success": true, "FitnessEval": 11, "InvalidPatch": 7, "Time": 4.109180212020874, "BestFitness": 0.0, "diff": "*** before: LIS.java.xml\n--- after: LIS.java.xml\n***************\n*** 28,34 ****\n--- 28,38 ----\n  \n              if (length == longest || val < arr[ends.get(length+1)]) {\n                  ends.put(length+1, i);\n+                 if (length == longest || val < arr[ends.get(length+1)]) {\n+                 ends.put(length+1, i);\n                  longest = length + 1;\n+             }\n+ \n              }\n  \n              i++;\n"}, {"BestPatch": "StmtInsertion({'target': ('LIS.java.xml', 14), 'ingredient': ('LIS.java.xml', 20), 'direction': 'after'})", "Success": true, "FitnessEval": 236, "InvalidPatch": 181, "Time": 83.40299654006958, "BestFitness": 0.0, "diff": "*** before: LIS.java.xml\n--- after: LIS.java.xml\n***************\n*** 26,32 ****\n  \n              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n  \n!             if (length == longest || val < arr[ends.get(length+1)]) {\n                  ends.put(length+1, i);\n                  longest = length + 1;\n              }\n--- 26,33 ----\n  \n              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n  \n!             ends.put(length+1, i);\n!                 if (length == longest || val < arr[ends.get(length+1)]) {\n                  ends.put(length+1, i);\n                  longest = length + 1;\n              }\n"}, {"BestPatch": "StmtInsertion({'target': ('LIS.java.xml', 14), 'ingredient': ('LIS.java.xml', 20), 'direction': 'after'})", "Success": true, "FitnessEval": 362, "InvalidPatch": 277, "Time": 125.8037416934967, "BestFitness": 0.0, "diff": "*** before: LIS.java.xml\n--- after: LIS.java.xml\n***************\n*** 26,32 ****\n  \n              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n  \n!             if (length == longest || val < arr[ends.get(length+1)]) {\n                  ends.put(length+1, i);\n                  longest = length + 1;\n              }\n--- 26,33 ----\n  \n              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n  \n!             ends.put(length+1, i);\n!                 if (length == longest || val < arr[ends.get(length+1)]) {\n                  ends.put(length+1, i);\n                  longest = length + 1;\n              }\n"}, {"BestPatch": "StmtInsertion({'target': ('LIS.java.xml', 16), 'ingredient': ('LIS.java.xml', 20), 'direction': 'after'})", "Success": true, "FitnessEval": 128, "InvalidPatch": 97, "Time": 45.522058725357056, "BestFitness": 0.0, "diff": "*** before: LIS.java.xml\n--- after: LIS.java.xml\n***************\n*** 26,32 ****\n  \n              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n  \n!             if (length == longest || val < arr[ends.get(length+1)]) {\n                  ends.put(length+1, i);\n                  longest = length + 1;\n              }\n--- 26,33 ----\n  \n              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n  \n!             ends.put(length+1, i);\n!                 if (length == longest || val < arr[ends.get(length+1)]) {\n                  ends.put(length+1, i);\n                  longest = length + 1;\n              }\n"}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 376, "Time": 176.46019673347473}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 387, "Time": 172.52924489974976}, {"BestPatch": "StmtReplacement({'target': ('LIS.java.xml', 21), 'ingredient': ('LIS.java.xml', 17)})", "Success": true, "FitnessEval": 32, "InvalidPatch": 24, "Time": 11.670204639434814, "BestFitness": 0.0, "diff": "*** before: LIS.java.xml\n--- after: LIS.java.xml\n***************\n*** 28,34 ****\n--- 28,38 ----\n  \n              if (length == longest || val < arr[ends.get(length+1)]) {\n                  ends.put(length+1, i);\n+                 if (length == longest || val < arr[ends.get(length+1)]) {\n+                 ends.put(length+1, i);\n                  longest = length + 1;\n+             }\n+ \n              }\n  \n              i++;\n"}, {"BestPatch": "StmtReplacement({'target': ('LIS.java.xml', 21), 'ingredient': ('LIS.java.xml', 17)})", "Success": true, "FitnessEval": 444, "InvalidPatch": 334, "Time": 158.18226504325867, "BestFitness": 0.0, "diff": "*** before: LIS.java.xml\n--- after: LIS.java.xml\n***************\n*** 28,34 ****\n--- 28,38 ----\n  \n              if (length == longest || val < arr[ends.get(length+1)]) {\n                  ends.put(length+1, i);\n+                 if (length == longest || val < arr[ends.get(length+1)]) {\n+                 ends.put(length+1, i);\n                  longest = length + 1;\n+             }\n+ \n              }\n  \n              i++;\n"}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 377, "Time": 176.16064834594727}, {"BestPatch": "StmtReplacement({'target': ('LIS.java.xml', 21), 'ingredient': ('LIS.java.xml', 17)})", "Success": true, "FitnessEval": 119, "InvalidPatch": 83, "Time": 45.18380570411682, "BestFitness": 0.0, "diff": "*** before: LIS.java.xml\n--- after: LIS.java.xml\n***************\n*** 28,34 ****\n--- 28,38 ----\n  \n              if (length == longest || val < arr[ends.get(length+1)]) {\n                  ends.put(length+1, i);\n+                 if (length == longest || val < arr[ends.get(length+1)]) {\n+                 ends.put(length+1, i);\n                  longest = length + 1;\n+             }\n+ \n              }\n  \n              i++;\n"}, {"BestPatch": "StmtInsertion({'target': ('LIS.java.xml', 17), 'ingredient': ('LIS.java.xml', 20), 'direction': 'before'})", "Success": true, "FitnessEval": 309, "InvalidPatch": 227, "Time": 113.07580852508545, "BestFitness": 0.0, "diff": "*** before: LIS.java.xml\n--- after: LIS.java.xml\n***************\n*** 26,32 ****\n  \n              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n  \n!             if (length == longest || val < arr[ends.get(length+1)]) {\n                  ends.put(length+1, i);\n                  longest = length + 1;\n              }\n--- 26,33 ----\n  \n              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n  \n!             ends.put(length+1, i);\n!                 if (length == longest || val < arr[ends.get(length+1)]) {\n                  ends.put(length+1, i);\n                  longest = length + 1;\n              }\n"}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 364, "Time": 182.34953355789185}, {"BestPatch": "StmtInsertion({'target': ('LIS.java.xml', 17), 'ingredient': ('LIS.java.xml', 20), 'direction': 'before'})", "Success": true, "FitnessEval": 83, "InvalidPatch": 67, "Time": 27.658348083496094, "BestFitness": 0.0, "diff": "*** before: LIS.java.xml\n--- after: LIS.java.xml\n***************\n*** 26,32 ****\n  \n              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n  \n!             if (length == longest || val < arr[ends.get(length+1)]) {\n                  ends.put(length+1, i);\n                  longest = length + 1;\n              }\n--- 26,33 ----\n  \n              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n  \n!             ends.put(length+1, i);\n!                 if (length == longest || val < arr[ends.get(length+1)]) {\n                  ends.put(length+1, i);\n                  longest = length + 1;\n              }\n"}, {"BestPatch": "StmtReplacement({'target': ('LIS.java.xml', 21), 'ingredient': ('LIS.java.xml', 17)})", "Success": true, "FitnessEval": 121, "InvalidPatch": 86, "Time": 44.7244975566864, "BestFitness": 0.0, "diff": "*** before: LIS.java.xml\n--- after: LIS.java.xml\n***************\n*** 28,34 ****\n--- 28,38 ----\n  \n              if (length == longest || val < arr[ends.get(length+1)]) {\n                  ends.put(length+1, i);\n+                 if (length == longest || val < arr[ends.get(length+1)]) {\n+                 ends.put(length+1, i);\n                  longest = length + 1;\n+             }\n+ \n              }\n  \n              i++;\n"}, {"BestPatch": "StmtReplacement({'target': ('LIS.java.xml', 21), 'ingredient': ('LIS.java.xml', 17)})", "Success": true, "FitnessEval": 93, "InvalidPatch": 72, "Time": 31.715816497802734, "BestFitness": 0.0, "diff": "*** before: LIS.java.xml\n--- after: LIS.java.xml\n***************\n*** 28,34 ****\n--- 28,38 ----\n  \n              if (length == longest || val < arr[ends.get(length+1)]) {\n                  ends.put(length+1, i);\n+                 if (length == longest || val < arr[ends.get(length+1)]) {\n+                 ends.put(length+1, i);\n                  longest = length + 1;\n+             }\n+ \n              }\n  \n              i++;\n"}]