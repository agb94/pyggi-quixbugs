[{"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 365, "Time": 205.77358293533325}, {"BestPatch": "LineReplacement({'target': ('LCS_LENGTH.java', 32), 'ingredient': ('LCS_LENGTH.java', 48)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 337, "Time": 226.42795085906982, "BestFitness": 6.0, "diff": "*** before: LCS_LENGTH.java\n--- after: LCS_LENGTH.java\n***************\n*** 30,36 ****\n          // now the actual code\n          for (int i=0; i < s.length(); i++) {\n              for (int j=0; j < t.length(); j++) {\n!                 if (s.charAt(i) == t.charAt(j)) {\n  \n                      if (dp.containsKey(i-1)) {\n                          Map<Integer, Integer> internal_map = dp.get(i);\n--- 30,36 ----\n          // now the actual code\n          for (int i=0; i < s.length(); i++) {\n              for (int j=0; j < t.length(); j++) {\n!         if (!dp.isEmpty()) {\n  \n                      if (dp.containsKey(i-1)) {\n                          Map<Integer, Integer> internal_map = dp.get(i);\n"}, {"BestPatch": "LineReplacement({'target': ('LCS_LENGTH.java', 24), 'ingredient': ('LCS_LENGTH.java', 41)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 322, "Time": 235.94587087631226, "BestFitness": 7.0, "diff": "*** before: LCS_LENGTH.java\n--- after: LCS_LENGTH.java\n***************\n*** 22,28 ****\n              dp.put(i, initialize);\n              for (int j=0; j < t.length(); j++) {\n                  Map<Integer,Integer> internal_map = dp.get(i);\n!                 internal_map.put(j,0);\n                  dp.put(i, internal_map);\n              }\n          }\n--- 22,28 ----\n              dp.put(i, initialize);\n              for (int j=0; j < t.length(); j++) {\n                  Map<Integer,Integer> internal_map = dp.get(i);\n!                         internal_map.put(j,1);\n                  dp.put(i, internal_map);\n              }\n          }\n"}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 345, "Time": 219.1854076385498}, {"BestPatch": "LineReplacement({'target': ('LCS_LENGTH.java', 25), 'ingredient': ('LCS_LENGTH.java', 41)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 346, "Time": 219.05844521522522, "BestFitness": 7.0, "diff": "*** before: LCS_LENGTH.java\n--- after: LCS_LENGTH.java\n***************\n*** 23,29 ****\n              for (int j=0; j < t.length(); j++) {\n                  Map<Integer,Integer> internal_map = dp.get(i);\n                  internal_map.put(j,0);\n!                 dp.put(i, internal_map);\n              }\n          }\n  \n--- 23,29 ----\n              for (int j=0; j < t.length(); j++) {\n                  Map<Integer,Integer> internal_map = dp.get(i);\n                  internal_map.put(j,0);\n!                         internal_map.put(j,1);\n              }\n          }\n  \n"}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 364, "Time": 204.34386229515076}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 333, "Time": 227.11570501327515}, {"BestPatch": "LineInsertion({'target': ('LCS_LENGTH.java', 34), 'ingredient': ('LCS_LENGTH.java', 54), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 333, "Time": 226.57544708251953, "BestFitness": 7.0, "diff": "*** before: LCS_LENGTH.java\n--- after: LCS_LENGTH.java\n***************\n*** 32,37 ****\n--- 32,38 ----\n              for (int j=0; j < t.length(); j++) {\n                  if (s.charAt(i) == t.charAt(j)) {\n  \n+         } else {\n                      if (dp.containsKey(i-1)) {\n                          Map<Integer, Integer> internal_map = dp.get(i);\n                          int insert_value = dp.get(i-1).get(j) + 1;\n"}, {"BestPatch": "LineReplacement({'target': ('LCS_LENGTH.java', 25), 'ingredient': ('LCS_LENGTH.java', 41)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 325, "Time": 232.73999762535095, "BestFitness": 7.0, "diff": "*** before: LCS_LENGTH.java\n--- after: LCS_LENGTH.java\n***************\n*** 23,29 ****\n              for (int j=0; j < t.length(); j++) {\n                  Map<Integer,Integer> internal_map = dp.get(i);\n                  internal_map.put(j,0);\n!                 dp.put(i, internal_map);\n              }\n          }\n  \n--- 23,29 ----\n              for (int j=0; j < t.length(); j++) {\n                  Map<Integer,Integer> internal_map = dp.get(i);\n                  internal_map.put(j,0);\n!                         internal_map.put(j,1);\n              }\n          }\n  \n"}, {"BestPatch": "LineReplacement({'target': ('LCS_LENGTH.java', 24), 'ingredient': ('LCS_LENGTH.java', 41)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 306, "Time": 247.42629528045654, "BestFitness": 7.0, "diff": "*** before: LCS_LENGTH.java\n--- after: LCS_LENGTH.java\n***************\n*** 22,28 ****\n              dp.put(i, initialize);\n              for (int j=0; j < t.length(); j++) {\n                  Map<Integer,Integer> internal_map = dp.get(i);\n!                 internal_map.put(j,0);\n                  dp.put(i, internal_map);\n              }\n          }\n--- 22,28 ----\n              dp.put(i, initialize);\n              for (int j=0; j < t.length(); j++) {\n                  Map<Integer,Integer> internal_map = dp.get(i);\n!                         internal_map.put(j,1);\n                  dp.put(i, internal_map);\n              }\n          }\n"}, {"BestPatch": "LineInsertion({'target': ('LCS_LENGTH.java', 34), 'ingredient': ('LCS_LENGTH.java', 39), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 338, "Time": 222.59631276130676, "BestFitness": 7.0, "diff": "*** before: LCS_LENGTH.java\n--- after: LCS_LENGTH.java\n***************\n*** 32,37 ****\n--- 32,38 ----\n              for (int j=0; j < t.length(); j++) {\n                  if (s.charAt(i) == t.charAt(j)) {\n  \n+                     } else {\n                      if (dp.containsKey(i-1)) {\n                          Map<Integer, Integer> internal_map = dp.get(i);\n                          int insert_value = dp.get(i-1).get(j) + 1;\n"}, {"BestPatch": "LineReplacement({'target': ('LCS_LENGTH.java', 33), 'ingredient': ('LCS_LENGTH.java', 39)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 342, "Time": 222.448175907135, "BestFitness": 7.0, "diff": "*** before: LCS_LENGTH.java\n--- after: LCS_LENGTH.java\n***************\n*** 31,37 ****\n          for (int i=0; i < s.length(); i++) {\n              for (int j=0; j < t.length(); j++) {\n                  if (s.charAt(i) == t.charAt(j)) {\n! \n                      if (dp.containsKey(i-1)) {\n                          Map<Integer, Integer> internal_map = dp.get(i);\n                          int insert_value = dp.get(i-1).get(j) + 1;\n--- 31,37 ----\n          for (int i=0; i < s.length(); i++) {\n              for (int j=0; j < t.length(); j++) {\n                  if (s.charAt(i) == t.charAt(j)) {\n!                     } else {\n                      if (dp.containsKey(i-1)) {\n                          Map<Integer, Integer> internal_map = dp.get(i);\n                          int insert_value = dp.get(i-1).get(j) + 1;\n"}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 352, "Time": 214.7765235900879}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 361, "Time": 210.27656984329224}, {"BestPatch": "LineInsertion({'target': ('LCS_LENGTH.java', 33), 'ingredient': ('LCS_LENGTH.java', 39), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 298, "Time": 251.36903595924377, "BestFitness": 7.0, "diff": "*** before: LCS_LENGTH.java\n--- after: LCS_LENGTH.java\n***************\n*** 31,36 ****\n--- 31,37 ----\n          for (int i=0; i < s.length(); i++) {\n              for (int j=0; j < t.length(); j++) {\n                  if (s.charAt(i) == t.charAt(j)) {\n+                     } else {\n  \n                      if (dp.containsKey(i-1)) {\n                          Map<Integer, Integer> internal_map = dp.get(i);\n"}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 349, "Time": 216.31883716583252}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 348, "Time": 218.77963089942932}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 351, "Time": 216.42694973945618}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 335, "Time": 228.51674222946167}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 349, "Time": 215.66292905807495}]