[{"BestPatch": "StmtInsertion({'target': ('FIND_FIRST_IN_SORTED.java.xml', 6), 'ingredient': ('FIND_FIRST_IN_SORTED.java.xml', 18), 'direction': 'after'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 341, "Time": 1475.9969670772552, "BestFitness": 2.0, "diff": "*** before: FIND_FIRST_IN_SORTED.java.xml\n--- after: FIND_FIRST_IN_SORTED.java.xml\n***************\n*** 19,24 ****\n--- 19,25 ----\n          while (lo <= hi) {\n              int mid = (lo + hi) / 2; // check if this is floor division\n  \n+             lo = mid + 1;\n              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                  return mid;\n              } else if (x <= arr[mid]) {\n"}, {"BestPatch": "StmtInsertion({'target': ('FIND_FIRST_IN_SORTED.java.xml', 7), 'ingredient': ('FIND_FIRST_IN_SORTED.java.xml', 18), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 243, "Time": 2244.892407655716, "BestFitness": 2.0, "diff": "*** before: FIND_FIRST_IN_SORTED.java.xml\n--- after: FIND_FIRST_IN_SORTED.java.xml\n***************\n*** 19,24 ****\n--- 19,25 ----\n          while (lo <= hi) {\n              int mid = (lo + hi) / 2; // check if this is floor division\n  \n+             lo = mid + 1;\n              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                  return mid;\n              } else if (x <= arr[mid]) {\n"}, {"BestPatch": "StmtInsertion({'target': ('FIND_FIRST_IN_SORTED.java.xml', 12), 'ingredient': ('FIND_FIRST_IN_SORTED.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('FIND_FIRST_IN_SORTED.java.xml', 6), 'ingredient': ('FIND_FIRST_IN_SORTED.java.xml', 5), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 259, "Time": 1640.4261033535004, "BestFitness": 1.0, "diff": "*** before: FIND_FIRST_IN_SORTED.java.xml\n--- after: FIND_FIRST_IN_SORTED.java.xml\n***************\n*** 17,22 ****\n--- 17,23 ----\n          int hi = arr.length;\n  \n          while (lo <= hi) {\n+             {\n              int mid = (lo + hi) / 2; // check if this is floor division\n  \n              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n***************\n*** 28,33 ****\n--- 29,48 ----\n              }\n          }\n  \n+         int mid = (lo + hi) / 2; // check if this is floor division\n+ \n+             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n+                 return mid;\n+             } else {\n+                 lo = mid + 1;\n+             }\n+         if (x <= arr[mid]) {\n+                 hi = mid;\n+             } else {\n+                 lo = mid + 1;\n+             }\n+         }\n+ \n          return -1;\n      }\n  \n"}, {"BestPatch": "StmtInsertion({'target': ('FIND_FIRST_IN_SORTED.java.xml', 17), 'ingredient': ('FIND_FIRST_IN_SORTED.java.xml', 18), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 310, "Time": 3053.9116547107697, "BestFitness": 2.0, "diff": "*** before: FIND_FIRST_IN_SORTED.java.xml\n--- after: FIND_FIRST_IN_SORTED.java.xml\n***************\n*** 23,29 ****\n                  return mid;\n              } else if (x <= arr[mid]) {\n                  hi = mid;\n!             } else {\n                  lo = mid + 1;\n              }\n          }\n--- 23,30 ----\n                  return mid;\n              } else if (x <= arr[mid]) {\n                  hi = mid;\n!             } else lo = mid + 1;\n!             {\n                  lo = mid + 1;\n              }\n          }\n"}, {"BestPatch": "StmtInsertion({'target': ('FIND_FIRST_IN_SORTED.java.xml', 6), 'ingredient': ('FIND_FIRST_IN_SORTED.java.xml', 18), 'direction': 'after'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 329, "Time": 1510.2848720550537, "BestFitness": 2.0, "diff": "*** before: FIND_FIRST_IN_SORTED.java.xml\n--- after: FIND_FIRST_IN_SORTED.java.xml\n***************\n*** 19,24 ****\n--- 19,25 ----\n          while (lo <= hi) {\n              int mid = (lo + hi) / 2; // check if this is floor division\n  \n+             lo = mid + 1;\n              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                  return mid;\n              } else if (x <= arr[mid]) {\n"}, {"BestPatch": "StmtInsertion({'target': ('FIND_FIRST_IN_SORTED.java.xml', 15), 'ingredient': ('FIND_FIRST_IN_SORTED.java.xml', 18), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 329, "Time": 3521.598472595215, "BestFitness": 2.0, "diff": "*** before: FIND_FIRST_IN_SORTED.java.xml\n--- after: FIND_FIRST_IN_SORTED.java.xml\n***************\n*** 22,28 ****\n              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                  return mid;\n              } else if (x <= arr[mid]) {\n!                 hi = mid;\n              } else {\n                  lo = mid + 1;\n              }\n--- 22,29 ----\n              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                  return mid;\n              } else if (x <= arr[mid]) {\n!                 lo = mid + 1;\n!             hi = mid;\n              } else {\n                  lo = mid + 1;\n              }\n"}, {"BestPatch": "StmtInsertion({'target': ('FIND_FIRST_IN_SORTED.java.xml', 7), 'ingredient': ('FIND_FIRST_IN_SORTED.java.xml', 18), 'direction': 'before'}) | StmtInsertion({'target': ('FIND_FIRST_IN_SORTED.java.xml', 4), 'ingredient': ('FIND_FIRST_IN_SORTED.java.xml', 5), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 210, "Time": 1804.6219084262848, "BestFitness": 1.0, "diff": "*** before: FIND_FIRST_IN_SORTED.java.xml\n--- after: FIND_FIRST_IN_SORTED.java.xml\n***************\n*** 16,24 ****\n--- 16,37 ----\n          int lo = 0;\n          int hi = arr.length;\n  \n+         {\n+             int mid = (lo + hi) / 2; // check if this is floor division\n+ \n+             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n+                 return mid;\n+             } else if (x <= arr[mid]) {\n+                 hi = mid;\n+             } else {\n+                 lo = mid + 1;\n+             }\n+         }\n+ \n          while (lo <= hi) {\n              int mid = (lo + hi) / 2; // check if this is floor division\n  \n+             lo = mid + 1;\n              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                  return mid;\n              } else if (x <= arr[mid]) {\n"}, {"BestPatch": "StmtReplacement({'target': ('FIND_FIRST_IN_SORTED.java.xml', 16), 'ingredient': ('FIND_FIRST_IN_SORTED.java.xml', 17)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 266, "Time": 3625.8693540096283, "BestFitness": 2.0, "diff": "*** before: FIND_FIRST_IN_SORTED.java.xml\n--- after: FIND_FIRST_IN_SORTED.java.xml\n***************\n*** 23,29 ****\n                  return mid;\n              } else if (x <= arr[mid]) {\n                  hi = mid;\n!             } else {\n                  lo = mid + 1;\n              }\n          }\n--- 23,29 ----\n                  return mid;\n              } else if (x <= arr[mid]) {\n                  hi = mid;\n!             } {\n                  lo = mid + 1;\n              }\n          }\n"}, {"BestPatch": "StmtReplacement({'target': ('FIND_FIRST_IN_SORTED.java.xml', 16), 'ingredient': ('FIND_FIRST_IN_SORTED.java.xml', 18)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 266, "Time": 3317.0099668502808, "BestFitness": 2.0, "diff": "*** before: FIND_FIRST_IN_SORTED.java.xml\n--- after: FIND_FIRST_IN_SORTED.java.xml\n***************\n*** 23,32 ****\n                  return mid;\n              } else if (x <= arr[mid]) {\n                  hi = mid;\n!             } else {\n!                 lo = mid + 1;\n              }\n-         }\n  \n          return -1;\n      }\n--- 23,30 ----\n                  return mid;\n              } else if (x <= arr[mid]) {\n                  hi = mid;\n!             } lo = mid + 1;\n              }\n  \n          return -1;\n      }\n"}, {"BestPatch": "StmtInsertion({'target': ('FIND_FIRST_IN_SORTED.java.xml', 17), 'ingredient': ('FIND_FIRST_IN_SORTED.java.xml', 7), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 333, "Time": 3486.6126108169556, "BestFitness": 2.0, "diff": "*** before: FIND_FIRST_IN_SORTED.java.xml\n--- after: FIND_FIRST_IN_SORTED.java.xml\n***************\n*** 23,29 ****\n--- 23,36 ----\n                  return mid;\n              } else if (x <= arr[mid]) {\n                  hi = mid;\n+             } else if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n+                 return mid;\n+             } else if (x <= arr[mid]) {\n+                 hi = mid;\n              } else {\n+                 lo = mid + 1;\n+             }\n+         {\n                  lo = mid + 1;\n              }\n          }\n"}, {"BestPatch": "StmtInsertion({'target': ('FIND_FIRST_IN_SORTED.java.xml', 7), 'ingredient': ('FIND_FIRST_IN_SORTED.java.xml', 17), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 359, "Time": 4320.794804573059, "BestFitness": 2.0, "diff": "*** before: FIND_FIRST_IN_SORTED.java.xml\n--- after: FIND_FIRST_IN_SORTED.java.xml\n***************\n*** 19,25 ****\n          while (lo <= hi) {\n              int mid = (lo + hi) / 2; // check if this is floor division\n  \n!             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                  return mid;\n              } else if (x <= arr[mid]) {\n                  hi = mid;\n--- 19,28 ----\n          while (lo <= hi) {\n              int mid = (lo + hi) / 2; // check if this is floor division\n  \n!             {\n!                 lo = mid + 1;\n!             }\n!         if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                  return mid;\n              } else if (x <= arr[mid]) {\n                  hi = mid;\n"}, {"BestPatch": "StmtReplacement({'target': ('FIND_FIRST_IN_SORTED.java.xml', 15), 'ingredient': ('FIND_FIRST_IN_SORTED.java.xml', 19)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 340, "Time": 3543.5131957530975, "BestFitness": 2.0, "diff": "*** before: FIND_FIRST_IN_SORTED.java.xml\n--- after: FIND_FIRST_IN_SORTED.java.xml\n***************\n*** 22,29 ****\n              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                  return mid;\n              } else if (x <= arr[mid]) {\n!                 hi = mid;\n!             } else {\n                  lo = mid + 1;\n              }\n          }\n--- 22,29 ----\n              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                  return mid;\n              } else if (x <= arr[mid]) {\n!                 return -1;\n!     } else {\n                  lo = mid + 1;\n              }\n          }\n"}, {"BestPatch": "StmtInsertion({'target': ('FIND_FIRST_IN_SORTED.java.xml', 17), 'ingredient': ('FIND_FIRST_IN_SORTED.java.xml', 12), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 322, "Time": 2298.929183244705, "BestFitness": 2.0, "diff": "*** before: FIND_FIRST_IN_SORTED.java.xml\n--- after: FIND_FIRST_IN_SORTED.java.xml\n***************\n*** 23,29 ****\n                  return mid;\n              } else if (x <= arr[mid]) {\n                  hi = mid;\n!             } else {\n                  lo = mid + 1;\n              }\n          }\n--- 23,31 ----\n                  return mid;\n              } else if (x <= arr[mid]) {\n                  hi = mid;\n!             } else if (x <= arr[mid]) {\n!                 hi = mid;\n!             }{\n                  lo = mid + 1;\n              }\n          }\n"}, {"BestPatch": "StmtInsertion({'target': ('FIND_FIRST_IN_SORTED.java.xml', 17), 'ingredient': ('FIND_FIRST_IN_SORTED.java.xml', 12), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 325, "Time": 2141.4220411777496, "BestFitness": 2.0, "diff": "*** before: FIND_FIRST_IN_SORTED.java.xml\n--- after: FIND_FIRST_IN_SORTED.java.xml\n***************\n*** 23,29 ****\n                  return mid;\n              } else if (x <= arr[mid]) {\n                  hi = mid;\n!             } else {\n                  lo = mid + 1;\n              }\n          }\n--- 23,31 ----\n                  return mid;\n              } else if (x <= arr[mid]) {\n                  hi = mid;\n!             } else if (x <= arr[mid]) {\n!                 hi = mid;\n!             }{\n                  lo = mid + 1;\n              }\n          }\n"}, {"BestPatch": "StmtInsertion({'target': ('FIND_FIRST_IN_SORTED.java.xml', 16), 'ingredient': ('FIND_FIRST_IN_SORTED.java.xml', 17), 'direction': 'after'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 339, "Time": 2183.2930772304535, "BestFitness": 2.0, "diff": "*** before: FIND_FIRST_IN_SORTED.java.xml\n--- after: FIND_FIRST_IN_SORTED.java.xml\n***************\n*** 26,31 ****\n--- 26,34 ----\n              } else {\n                  lo = mid + 1;\n              }\n+         {\n+                 lo = mid + 1;\n+             }\n          }\n  \n          return -1;\n"}, {"BestPatch": "StmtInsertion({'target': ('FIND_FIRST_IN_SORTED.java.xml', 16), 'ingredient': ('FIND_FIRST_IN_SORTED.java.xml', 17), 'direction': 'after'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 321, "Time": 3017.772933959961, "BestFitness": 2.0, "diff": "*** before: FIND_FIRST_IN_SORTED.java.xml\n--- after: FIND_FIRST_IN_SORTED.java.xml\n***************\n*** 26,31 ****\n--- 26,34 ----\n              } else {\n                  lo = mid + 1;\n              }\n+         {\n+                 lo = mid + 1;\n+             }\n          }\n  \n          return -1;\n"}, {"BestPatch": "StmtInsertion({'target': ('FIND_FIRST_IN_SORTED.java.xml', 18), 'ingredient': ('FIND_FIRST_IN_SORTED.java.xml', 17), 'direction': 'after'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 334, "Time": 2841.9401030540466, "BestFitness": 2.0, "diff": "*** before: FIND_FIRST_IN_SORTED.java.xml\n--- after: FIND_FIRST_IN_SORTED.java.xml\n***************\n*** 26,31 ****\n--- 26,34 ----\n              } else {\n                  lo = mid + 1;\n              }\n+         {\n+                 lo = mid + 1;\n+             }\n          }\n  \n          return -1;\n"}, {"BestPatch": "StmtReplacement({'target': ('FIND_FIRST_IN_SORTED.java.xml', 14), 'ingredient': ('FIND_FIRST_IN_SORTED.java.xml', 19)}) | StmtInsertion({'target': ('FIND_FIRST_IN_SORTED.java.xml', 3), 'ingredient': ('FIND_FIRST_IN_SORTED.java.xml', 5), 'direction': 'after'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 320, "Time": 3305.961365222931, "BestFitness": 1.0, "diff": "*** before: FIND_FIRST_IN_SORTED.java.xml\n--- after: FIND_FIRST_IN_SORTED.java.xml\n***************\n*** 16,22 ****\n          int lo = 0;\n          int hi = arr.length;\n  \n!         while (lo <= hi) {\n              int mid = (lo + hi) / 2; // check if this is floor division\n  \n              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n--- 16,22 ----\n          int lo = 0;\n          int hi = arr.length;\n  \n!         {\n              int mid = (lo + hi) / 2; // check if this is floor division\n  \n              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n***************\n*** 28,33 ****\n--- 28,44 ----\n              }\n          }\n  \n+         while (lo <= hi) {\n+             int mid = (lo + hi) / 2; // check if this is floor division\n+ \n+             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n+                 return mid;\n+             } else if (x <= arr[mid]) return -1;\n+      else {\n+                 lo = mid + 1;\n+             }\n+         }\n+ \n          return -1;\n      }\n  \n"}, {"BestPatch": "StmtReplacement({'target': ('FIND_FIRST_IN_SORTED.java.xml', 13), 'ingredient': ('FIND_FIRST_IN_SORTED.java.xml', 19)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 353, "Time": 3341.414543390274, "BestFitness": 2.0, "diff": "*** before: FIND_FIRST_IN_SORTED.java.xml\n--- after: FIND_FIRST_IN_SORTED.java.xml\n***************\n*** 21,29 ****\n  \n              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                  return mid;\n!             } else if (x <= arr[mid]) {\n!                 hi = mid;\n!             } else {\n                  lo = mid + 1;\n              }\n          }\n--- 21,28 ----\n  \n              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                  return mid;\n!             } else if (x <= arr[mid])return -1;\n!      else {\n                  lo = mid + 1;\n              }\n          }\n"}, {"BestPatch": "StmtReplacement({'target': ('FIND_FIRST_IN_SORTED.java.xml', 14), 'ingredient': ('FIND_FIRST_IN_SORTED.java.xml', 19)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 326, "Time": 3473.954594373703, "BestFitness": 2.0, "diff": "*** before: FIND_FIRST_IN_SORTED.java.xml\n--- after: FIND_FIRST_IN_SORTED.java.xml\n***************\n*** 21,29 ****\n  \n              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                  return mid;\n!             } else if (x <= arr[mid]) {\n!                 hi = mid;\n!             } else {\n                  lo = mid + 1;\n              }\n          }\n--- 21,28 ----\n  \n              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                  return mid;\n!             } else if (x <= arr[mid]) return -1;\n!      else {\n                  lo = mid + 1;\n              }\n          }\n"}]