[{"BestPatch": "StmtInsertion({'target': ('LCS_LENGTH.java.xml', 17), 'ingredient': ('LCS_LENGTH.java.xml', 18), 'direction': 'after'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 365, "Time": 231.05031394958496, "BestFitness": 6.0, "diff": "*** before: LCS_LENGTH.java.xml\n--- after: LCS_LENGTH.java.xml\n***************\n*** 43,48 ****\n--- 43,61 ----\n                          dp.put(i,internal_map);\n                      }\n                  }\n+             {\n+ \n+                     if (dp.containsKey(i-1)) {\n+                         Map<Integer, Integer> internal_map = dp.get(i);\n+                         int insert_value = dp.get(i-1).get(j) + 1;\n+                         internal_map.put(j, insert_value);\n+                         dp.put(i,internal_map);\n+                     } else {\n+                         Map<Integer, Integer> internal_map = dp.get(i);\n+                         internal_map.put(j,1);\n+                         dp.put(i,internal_map);\n+                     }\n+                 }\n              }\n          }\n  \n"}, {"BestPatch": "StmtReplacement({'target': ('LCS_LENGTH.java.xml', 15), 'ingredient': ('LCS_LENGTH.java.xml', 18)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 292, "Time": 278.9310932159424, "BestFitness": 6.0, "diff": "*** before: LCS_LENGTH.java.xml\n--- after: LCS_LENGTH.java.xml\n***************\n*** 30,36 ****\n          // now the actual code\n          for (int i=0; i < s.length(); i++) {\n              for (int j=0; j < t.length(); j++) {\n-                 if (s.charAt(i) == t.charAt(j)) {\n  \n                      if (dp.containsKey(i-1)) {\n                          Map<Integer, Integer> internal_map = dp.get(i);\n--- 30,35 ----\n***************\n*** 44,50 ****\n                      }\n                  }\n              }\n-         }\n  \n          if (!dp.isEmpty()) {\n              List<Integer> ret_list = new ArrayList<Integer>();\n--- 43,48 ----\n"}, {"BestPatch": "StmtReplacement({'target': ('LCS_LENGTH.java.xml', 8), 'ingredient': ('LCS_LENGTH.java.xml', 19)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 350, "Time": 241.34936904907227, "BestFitness": 6.0, "diff": "*** before: LCS_LENGTH.java.xml\n--- after: LCS_LENGTH.java.xml\n***************\n*** 20,31 ****\n          for (int i=0; i < s.length(); i++) {\n              Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n              dp.put(i, initialize);\n!             for (int j=0; j < t.length(); j++) {\n!                 Map<Integer,Integer> internal_map = dp.get(i);\n!                 internal_map.put(j,0);\n!                 dp.put(i, internal_map);\n!             }\n!         }\n  \n          // now the actual code\n          for (int i=0; i < s.length(); i++) {\n--- 20,36 ----\n          for (int i=0; i < s.length(); i++) {\n              Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n              dp.put(i, initialize);\n!             for (int j=0; j < t.length(); j++) if (dp.containsKey(i-1)) {\n!                         Map<Integer, Integer> internal_map = dp.get(i);\n!                         int insert_value = dp.get(i-1).get(j) + 1;\n!                         internal_map.put(j, insert_value);\n!                         dp.put(i,internal_map);\n!                     } else {\n!                         Map<Integer, Integer> internal_map = dp.get(i);\n!                         internal_map.put(j,1);\n!                         dp.put(i,internal_map);\n!                     }\n!                 }\n  \n          // now the actual code\n          for (int i=0; i < s.length(); i++) {\n"}, {"BestPatch": "StmtInsertion({'target': ('LCS_LENGTH.java.xml', 17), 'ingredient': ('LCS_LENGTH.java.xml', 17), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 381, "Time": 221.93619871139526, "BestFitness": 6.0, "diff": "*** before: LCS_LENGTH.java.xml\n--- after: LCS_LENGTH.java.xml\n***************\n*** 43,48 ****\n--- 43,61 ----\n                          dp.put(i,internal_map);\n                      }\n                  }\n+              {\n+ \n+                     if (dp.containsKey(i-1)) {\n+                         Map<Integer, Integer> internal_map = dp.get(i);\n+                         int insert_value = dp.get(i-1).get(j) + 1;\n+                         internal_map.put(j, insert_value);\n+                         dp.put(i,internal_map);\n+                     } else {\n+                         Map<Integer, Integer> internal_map = dp.get(i);\n+                         internal_map.put(j,1);\n+                         dp.put(i,internal_map);\n+                     }\n+                 }\n              }\n          }\n  \n"}, {"BestPatch": "StmtReplacement({'target': ('LCS_LENGTH.java.xml', 4), 'ingredient': ('LCS_LENGTH.java.xml', 42)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 297, "Time": 276.756263256073, "BestFitness": 8.0, "diff": "*** before: LCS_LENGTH.java.xml\n--- after: LCS_LENGTH.java.xml\n***************\n*** 18,33 ****\n  \n          // just set all the internal maps to 0\n          for (int i=0; i < s.length(); i++) {\n!             Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n!             dp.put(i, initialize);\n!             for (int j=0; j < t.length(); j++) {\n!                 Map<Integer,Integer> internal_map = dp.get(i);\n!                 internal_map.put(j,0);\n!                 dp.put(i, internal_map);\n!             }\n          }\n! \n!         // now the actual code\n          for (int i=0; i < s.length(); i++) {\n              for (int j=0; j < t.length(); j++) {\n                  if (s.charAt(i) == t.charAt(j)) {\n--- 18,26 ----\n  \n          // just set all the internal maps to 0\n          for (int i=0; i < s.length(); i++) {\n!             return 0;\n          }\n!     // now the actual code\n          for (int i=0; i < s.length(); i++) {\n              for (int j=0; j < t.length(); j++) {\n                  if (s.charAt(i) == t.charAt(j)) {\n"}, {"BestPatch": "StmtInsertion({'target': ('LCS_LENGTH.java.xml', 10), 'ingredient': ('LCS_LENGTH.java.xml', 29), 'direction': 'after'}) | StmtInsertion({'target': ('LCS_LENGTH.java.xml', 18), 'ingredient': ('LCS_LENGTH.java.xml', 19), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 337, "Time": 249.62146162986755, "BestFitness": 6.0, "diff": "*** before: LCS_LENGTH.java.xml\n--- after: LCS_LENGTH.java.xml\n***************\n*** 23,36 ****\n              for (int j=0; j < t.length(); j++) {\n                  Map<Integer,Integer> internal_map = dp.get(i);\n                  internal_map.put(j,0);\n!                 dp.put(i, internal_map);\n              }\n          }\n  \n          // now the actual code\n          for (int i=0; i < s.length(); i++) {\n              for (int j=0; j < t.length(); j++) {\n!                 if (s.charAt(i) == t.charAt(j)) {\n  \n                      if (dp.containsKey(i-1)) {\n                          Map<Integer, Integer> internal_map = dp.get(i);\n--- 23,47 ----\n              for (int j=0; j < t.length(); j++) {\n                  Map<Integer,Integer> internal_map = dp.get(i);\n                  internal_map.put(j,0);\n!                 internal_map.put(j,1);\n!                         dp.put(i, internal_map);\n              }\n          }\n  \n          // now the actual code\n          for (int i=0; i < s.length(); i++) {\n              for (int j=0; j < t.length(); j++) {\n!                 if (s.charAt(i) == t.charAt(j)) if (dp.containsKey(i-1)) {\n!                         Map<Integer, Integer> internal_map = dp.get(i);\n!                         int insert_value = dp.get(i-1).get(j) + 1;\n!                         internal_map.put(j, insert_value);\n!                         dp.put(i,internal_map);\n!                     } else {\n!                         Map<Integer, Integer> internal_map = dp.get(i);\n!                         internal_map.put(j,1);\n!                         dp.put(i,internal_map);\n!                     }\n!                 {\n  \n                      if (dp.containsKey(i-1)) {\n                          Map<Integer, Integer> internal_map = dp.get(i);\n"}, {"BestPatch": "StmtReplacement({'target': ('LCS_LENGTH.java.xml', 16), 'ingredient': ('LCS_LENGTH.java.xml', 18)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 357, "Time": 234.22064208984375, "BestFitness": 6.0, "diff": "*** before: LCS_LENGTH.java.xml\n--- after: LCS_LENGTH.java.xml\n***************\n*** 30,36 ****\n          // now the actual code\n          for (int i=0; i < s.length(); i++) {\n              for (int j=0; j < t.length(); j++) {\n!                 if (s.charAt(i) == t.charAt(j)) {\n  \n                      if (dp.containsKey(i-1)) {\n                          Map<Integer, Integer> internal_map = dp.get(i);\n--- 30,36 ----\n          // now the actual code\n          for (int i=0; i < s.length(); i++) {\n              for (int j=0; j < t.length(); j++) {\n!                 {\n  \n                      if (dp.containsKey(i-1)) {\n                          Map<Integer, Integer> internal_map = dp.get(i);\n"}, {"BestPatch": "StmtInsertion({'target': ('LCS_LENGTH.java.xml', 19), 'ingredient': ('LCS_LENGTH.java.xml', 19), 'direction': 'after'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 353, "Time": 241.0191285610199, "BestFitness": 6.0, "diff": "*** before: LCS_LENGTH.java.xml\n--- after: LCS_LENGTH.java.xml\n***************\n*** 43,49 ****\n                          dp.put(i,internal_map);\n                      }\n                  }\n!             }\n          }\n  \n          if (!dp.isEmpty()) {\n--- 43,59 ----\n                          dp.put(i,internal_map);\n                      }\n                  }\n!             if (dp.containsKey(i-1)) {\n!                         Map<Integer, Integer> internal_map = dp.get(i);\n!                         int insert_value = dp.get(i-1).get(j) + 1;\n!                         internal_map.put(j, insert_value);\n!                         dp.put(i,internal_map);\n!                     } else {\n!                         Map<Integer, Integer> internal_map = dp.get(i);\n!                         internal_map.put(j,1);\n!                         dp.put(i,internal_map);\n!                     }\n!                 }\n          }\n  \n          if (!dp.isEmpty()) {\n"}, {"BestPatch": "StmtInsertion({'target': ('LCS_LENGTH.java.xml', 17), 'ingredient': ('LCS_LENGTH.java.xml', 27), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 254, "Time": 306.9156012535095, "BestFitness": 6.0, "diff": "*** before: LCS_LENGTH.java.xml\n--- after: LCS_LENGTH.java.xml\n***************\n*** 30,36 ****\n          // now the actual code\n          for (int i=0; i < s.length(); i++) {\n              for (int j=0; j < t.length(); j++) {\n!                 if (s.charAt(i) == t.charAt(j)) {\n  \n                      if (dp.containsKey(i-1)) {\n                          Map<Integer, Integer> internal_map = dp.get(i);\n--- 30,41 ----\n          // now the actual code\n          for (int i=0; i < s.length(); i++) {\n              for (int j=0; j < t.length(); j++) {\n!                 if (s.charAt(i) == t.charAt(j)){\n!                         Map<Integer, Integer> internal_map = dp.get(i);\n!                         internal_map.put(j,1);\n!                         dp.put(i,internal_map);\n!                     }\n!                  {\n  \n                      if (dp.containsKey(i-1)) {\n                          Map<Integer, Integer> internal_map = dp.get(i);\n"}, {"BestPatch": "StmtReplacement({'target': ('LCS_LENGTH.java.xml', 15), 'ingredient': ('LCS_LENGTH.java.xml', 19)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 244, "Time": 308.83073806762695, "BestFitness": 6.0, "diff": "*** before: LCS_LENGTH.java.xml\n--- after: LCS_LENGTH.java.xml\n***************\n*** 29,38 ****\n  \n          // now the actual code\n          for (int i=0; i < s.length(); i++) {\n!             for (int j=0; j < t.length(); j++) {\n!                 if (s.charAt(i) == t.charAt(j)) {\n! \n!                     if (dp.containsKey(i-1)) {\n                          Map<Integer, Integer> internal_map = dp.get(i);\n                          int insert_value = dp.get(i-1).get(j) + 1;\n                          internal_map.put(j, insert_value);\n--- 29,35 ----\n  \n          // now the actual code\n          for (int i=0; i < s.length(); i++) {\n!             for (int j=0; j < t.length(); j++) if (dp.containsKey(i-1)) {\n                          Map<Integer, Integer> internal_map = dp.get(i);\n                          int insert_value = dp.get(i-1).get(j) + 1;\n                          internal_map.put(j, insert_value);\n***************\n*** 43,50 ****\n                          dp.put(i,internal_map);\n                      }\n                  }\n-             }\n-         }\n  \n          if (!dp.isEmpty()) {\n              List<Integer> ret_list = new ArrayList<Integer>();\n--- 40,45 ----\n"}, {"BestPatch": "StmtReplacement({'target': ('LCS_LENGTH.java.xml', 15), 'ingredient': ('LCS_LENGTH.java.xml', 18)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 277, "Time": 287.98524284362793, "BestFitness": 6.0, "diff": "*** before: LCS_LENGTH.java.xml\n--- after: LCS_LENGTH.java.xml\n***************\n*** 30,36 ****\n          // now the actual code\n          for (int i=0; i < s.length(); i++) {\n              for (int j=0; j < t.length(); j++) {\n-                 if (s.charAt(i) == t.charAt(j)) {\n  \n                      if (dp.containsKey(i-1)) {\n                          Map<Integer, Integer> internal_map = dp.get(i);\n--- 30,35 ----\n***************\n*** 44,50 ****\n                      }\n                  }\n              }\n-         }\n  \n          if (!dp.isEmpty()) {\n              List<Integer> ret_list = new ArrayList<Integer>();\n--- 43,48 ----\n"}, {"BestPatch": "StmtInsertion({'target': ('LCS_LENGTH.java.xml', 11), 'ingredient': ('LCS_LENGTH.java.xml', 29), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 384, "Time": 216.70245242118835, "BestFitness": 7.0, "diff": "*** before: LCS_LENGTH.java.xml\n--- after: LCS_LENGTH.java.xml\n***************\n*** 23,29 ****\n              for (int j=0; j < t.length(); j++) {\n                  Map<Integer,Integer> internal_map = dp.get(i);\n                  internal_map.put(j,0);\n!                 dp.put(i, internal_map);\n              }\n          }\n  \n--- 23,30 ----\n              for (int j=0; j < t.length(); j++) {\n                  Map<Integer,Integer> internal_map = dp.get(i);\n                  internal_map.put(j,0);\n!                 internal_map.put(j,1);\n!                         dp.put(i, internal_map);\n              }\n          }\n  \n"}, {"BestPatch": "StmtReplacement({'target': ('LCS_LENGTH.java.xml', 7), 'ingredient': ('LCS_LENGTH.java.xml', 43)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 333, "Time": 252.27472376823425, "BestFitness": 8.0, "diff": "*** before: LCS_LENGTH.java.xml\n--- after: LCS_LENGTH.java.xml\n***************\n*** 20,30 ****\n          for (int i=0; i < s.length(); i++) {\n              Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n              dp.put(i, initialize);\n!             for (int j=0; j < t.length(); j++) {\n!                 Map<Integer,Integer> internal_map = dp.get(i);\n!                 internal_map.put(j,0);\n!                 dp.put(i, internal_map);\n!             }\n          }\n  \n          // now the actual code\n--- 20,26 ----\n          for (int i=0; i < s.length(); i++) {\n              Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n              dp.put(i, initialize);\n!             return 0;\n          }\n  \n          // now the actual code\n"}, {"BestPatch": "StmtReplacement({'target': ('LCS_LENGTH.java.xml', 8), 'ingredient': ('LCS_LENGTH.java.xml', 17)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 352, "Time": 240.8845944404602, "BestFitness": 6.0, "diff": "*** before: LCS_LENGTH.java.xml\n--- after: LCS_LENGTH.java.xml\n***************\n*** 20,31 ****\n          for (int i=0; i < s.length(); i++) {\n              Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n              dp.put(i, initialize);\n!             for (int j=0; j < t.length(); j++) {\n!                 Map<Integer,Integer> internal_map = dp.get(i);\n!                 internal_map.put(j,0);\n!                 dp.put(i, internal_map);\n              }\n-         }\n  \n          // now the actual code\n          for (int i=0; i < s.length(); i++) {\n--- 20,39 ----\n          for (int i=0; i < s.length(); i++) {\n              Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n              dp.put(i, initialize);\n!             for (int j=0; j < t.length(); j++)  {\n! \n!                     if (dp.containsKey(i-1)) {\n!                         Map<Integer, Integer> internal_map = dp.get(i);\n!                         int insert_value = dp.get(i-1).get(j) + 1;\n!                         internal_map.put(j, insert_value);\n!                         dp.put(i,internal_map);\n!                     } else {\n!                         Map<Integer, Integer> internal_map = dp.get(i);\n!                         internal_map.put(j,1);\n!                         dp.put(i,internal_map);\n!                     }\n!                 }\n              }\n  \n          // now the actual code\n          for (int i=0; i < s.length(); i++) {\n"}, {"BestPatch": "StmtInsertion({'target': ('LCS_LENGTH.java.xml', 18), 'ingredient': ('LCS_LENGTH.java.xml', 8), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 328, "Time": 255.91154026985168, "BestFitness": 6.0, "diff": "*** before: LCS_LENGTH.java.xml\n--- after: LCS_LENGTH.java.xml\n***************\n*** 31,36 ****\n--- 31,41 ----\n          for (int i=0; i < s.length(); i++) {\n              for (int j=0; j < t.length(); j++) {\n                  if (s.charAt(i) == t.charAt(j)) {\n+                 Map<Integer,Integer> internal_map = dp.get(i);\n+                 internal_map.put(j,0);\n+                 dp.put(i, internal_map);\n+             }\n+         {\n  \n                      if (dp.containsKey(i-1)) {\n                          Map<Integer, Integer> internal_map = dp.get(i);\n"}, {"BestPatch": "StmtInsertion({'target': ('LCS_LENGTH.java.xml', 19), 'ingredient': ('LCS_LENGTH.java.xml', 17), 'direction': 'after'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 384, "Time": 218.81453204154968, "BestFitness": 6.0, "diff": "*** before: LCS_LENGTH.java.xml\n--- after: LCS_LENGTH.java.xml\n***************\n*** 43,48 ****\n--- 43,61 ----\n                          dp.put(i,internal_map);\n                      }\n                  }\n+              {\n+ \n+                     if (dp.containsKey(i-1)) {\n+                         Map<Integer, Integer> internal_map = dp.get(i);\n+                         int insert_value = dp.get(i-1).get(j) + 1;\n+                         internal_map.put(j, insert_value);\n+                         dp.put(i,internal_map);\n+                     } else {\n+                         Map<Integer, Integer> internal_map = dp.get(i);\n+                         internal_map.put(j,1);\n+                         dp.put(i,internal_map);\n+                     }\n+                 }\n              }\n          }\n  \n"}, {"BestPatch": "StmtReplacement({'target': ('LCS_LENGTH.java.xml', 16), 'ingredient': ('LCS_LENGTH.java.xml', 18)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 257, "Time": 300.5175337791443, "BestFitness": 6.0, "diff": "*** before: LCS_LENGTH.java.xml\n--- after: LCS_LENGTH.java.xml\n***************\n*** 30,36 ****\n          // now the actual code\n          for (int i=0; i < s.length(); i++) {\n              for (int j=0; j < t.length(); j++) {\n!                 if (s.charAt(i) == t.charAt(j)) {\n  \n                      if (dp.containsKey(i-1)) {\n                          Map<Integer, Integer> internal_map = dp.get(i);\n--- 30,36 ----\n          // now the actual code\n          for (int i=0; i < s.length(); i++) {\n              for (int j=0; j < t.length(); j++) {\n!                 {\n  \n                      if (dp.containsKey(i-1)) {\n                          Map<Integer, Integer> internal_map = dp.get(i);\n"}, {"BestPatch": "StmtReplacement({'target': ('LCS_LENGTH.java.xml', 4), 'ingredient': ('LCS_LENGTH.java.xml', 42)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 319, "Time": 256.181423664093, "BestFitness": 8.0, "diff": "*** before: LCS_LENGTH.java.xml\n--- after: LCS_LENGTH.java.xml\n***************\n*** 18,33 ****\n  \n          // just set all the internal maps to 0\n          for (int i=0; i < s.length(); i++) {\n!             Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n!             dp.put(i, initialize);\n!             for (int j=0; j < t.length(); j++) {\n!                 Map<Integer,Integer> internal_map = dp.get(i);\n!                 internal_map.put(j,0);\n!                 dp.put(i, internal_map);\n!             }\n          }\n! \n!         // now the actual code\n          for (int i=0; i < s.length(); i++) {\n              for (int j=0; j < t.length(); j++) {\n                  if (s.charAt(i) == t.charAt(j)) {\n--- 18,26 ----\n  \n          // just set all the internal maps to 0\n          for (int i=0; i < s.length(); i++) {\n!             return 0;\n          }\n!     // now the actual code\n          for (int i=0; i < s.length(); i++) {\n              for (int j=0; j < t.length(); j++) {\n                  if (s.charAt(i) == t.charAt(j)) {\n"}, {"BestPatch": "StmtInsertion({'target': ('LCS_LENGTH.java.xml', 10), 'ingredient': ('LCS_LENGTH.java.xml', 29), 'direction': 'after'}) | StmtInsertion({'target': ('LCS_LENGTH.java.xml', 18), 'ingredient': ('LCS_LENGTH.java.xml', 17), 'direction': 'after'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 335, "Time": 248.96413207054138, "BestFitness": 6.0, "diff": "*** before: LCS_LENGTH.java.xml\n--- after: LCS_LENGTH.java.xml\n***************\n*** 23,29 ****\n              for (int j=0; j < t.length(); j++) {\n                  Map<Integer,Integer> internal_map = dp.get(i);\n                  internal_map.put(j,0);\n!                 dp.put(i, internal_map);\n              }\n          }\n  \n--- 23,30 ----\n              for (int j=0; j < t.length(); j++) {\n                  Map<Integer,Integer> internal_map = dp.get(i);\n                  internal_map.put(j,0);\n!                 internal_map.put(j,1);\n!                         dp.put(i, internal_map);\n              }\n          }\n  \n***************\n*** 31,36 ****\n--- 32,50 ----\n          for (int i=0; i < s.length(); i++) {\n              for (int j=0; j < t.length(); j++) {\n                  if (s.charAt(i) == t.charAt(j)) {\n+ \n+                     if (dp.containsKey(i-1)) {\n+                         Map<Integer, Integer> internal_map = dp.get(i);\n+                         int insert_value = dp.get(i-1).get(j) + 1;\n+                         internal_map.put(j, insert_value);\n+                         dp.put(i,internal_map);\n+                     } else {\n+                         Map<Integer, Integer> internal_map = dp.get(i);\n+                         internal_map.put(j,1);\n+                         dp.put(i,internal_map);\n+                     }\n+                 }\n+              {\n  \n                      if (dp.containsKey(i-1)) {\n                          Map<Integer, Integer> internal_map = dp.get(i);\n"}, {"BestPatch": "StmtInsertion({'target': ('LCS_LENGTH.java.xml', 18), 'ingredient': ('LCS_LENGTH.java.xml', 18), 'direction': 'after'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 386, "Time": 216.88868021965027, "BestFitness": 6.0, "diff": "*** before: LCS_LENGTH.java.xml\n--- after: LCS_LENGTH.java.xml\n***************\n*** 43,48 ****\n--- 43,61 ----\n                          dp.put(i,internal_map);\n                      }\n                  }\n+             {\n+ \n+                     if (dp.containsKey(i-1)) {\n+                         Map<Integer, Integer> internal_map = dp.get(i);\n+                         int insert_value = dp.get(i-1).get(j) + 1;\n+                         internal_map.put(j, insert_value);\n+                         dp.put(i,internal_map);\n+                     } else {\n+                         Map<Integer, Integer> internal_map = dp.get(i);\n+                         internal_map.put(j,1);\n+                         dp.put(i,internal_map);\n+                     }\n+                 }\n              }\n          }\n  \n"}]