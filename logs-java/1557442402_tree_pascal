[{"BestPatch": "StmtInsertion({'target': ('PASCAL.java.xml', 8), 'ingredient': ('PASCAL.java.xml', 9), 'direction': 'after'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 369, "Time": 175.28056144714355, "BestFitness": 3.0, "diff": "*** before: PASCAL.java.xml\n--- after: PASCAL.java.xml\n***************\n*** 33,38 ****\n--- 33,52 ----\n                  }\n                  row.add(upleft+upright);\n              }\n+             for (int c=0; c<r; c++) {\n+                 int upleft, upright;\n+                 if (c > 0) {\n+                     upleft = rows.get(r-1).get(c-1);\n+                 } else {\n+                     upleft = 0;\n+                 }\n+                 if (c < r) {\n+                     upright = rows.get(r-1).get(c);\n+                 } else {\n+                     upright = 0;\n+                 }\n+                 row.add(upleft+upright);\n+             }\n              rows.add(row);\n          }\n  \n"}, {"BestPatch": "StmtInsertion({'target': ('PASCAL.java.xml', 8), 'ingredient': ('PASCAL.java.xml', 9), 'direction': 'after'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 390, "Time": 167.05325603485107, "BestFitness": 3.0, "diff": "*** before: PASCAL.java.xml\n--- after: PASCAL.java.xml\n***************\n*** 33,38 ****\n--- 33,52 ----\n                  }\n                  row.add(upleft+upright);\n              }\n+             for (int c=0; c<r; c++) {\n+                 int upleft, upright;\n+                 if (c > 0) {\n+                     upleft = rows.get(r-1).get(c-1);\n+                 } else {\n+                     upleft = 0;\n+                 }\n+                 if (c < r) {\n+                     upright = rows.get(r-1).get(c);\n+                 } else {\n+                     upright = 0;\n+                 }\n+                 row.add(upleft+upright);\n+             }\n              rows.add(row);\n          }\n  \n"}, {"BestPatch": "StmtInsertion({'target': ('PASCAL.java.xml', 25), 'ingredient': ('PASCAL.java.xml', 26), 'direction': 'after'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 375, "Time": 171.6434464454651, "BestFitness": 3.0, "diff": "*** before: PASCAL.java.xml\n--- after: PASCAL.java.xml\n***************\n*** 32,37 ****\n--- 32,38 ----\n                      upright = 0;\n                  }\n                  row.add(upleft+upright);\n+             row.add(upleft+upright);\n              }\n              rows.add(row);\n          }\n"}, {"BestPatch": "StmtInsertion({'target': ('PASCAL.java.xml', 26), 'ingredient': ('PASCAL.java.xml', 9), 'direction': 'after'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 350, "Time": 182.66257667541504, "BestFitness": 3.0, "diff": "*** before: PASCAL.java.xml\n--- after: PASCAL.java.xml\n***************\n*** 33,38 ****\n--- 33,52 ----\n                  }\n                  row.add(upleft+upright);\n              }\n+             for (int c=0; c<r; c++) {\n+                 int upleft, upright;\n+                 if (c > 0) {\n+                     upleft = rows.get(r-1).get(c-1);\n+                 } else {\n+                     upleft = 0;\n+                 }\n+                 if (c < r) {\n+                     upright = rows.get(r-1).get(c);\n+                 } else {\n+                     upright = 0;\n+                 }\n+                 row.add(upleft+upright);\n+             }\n              rows.add(row);\n          }\n  \n"}, {"BestPatch": "StmtInsertion({'target': ('PASCAL.java.xml', 23), 'ingredient': ('PASCAL.java.xml', 26), 'direction': 'after'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 351, "Time": 180.22902917861938, "BestFitness": 3.0, "diff": "*** before: PASCAL.java.xml\n--- after: PASCAL.java.xml\n***************\n*** 32,37 ****\n--- 32,38 ----\n                      upright = 0;\n                  }\n                  row.add(upleft+upright);\n+             row.add(upleft+upright);\n              }\n              rows.add(row);\n          }\n"}, {"BestPatch": "StmtInsertion({'target': ('PASCAL.java.xml', 19), 'ingredient': ('PASCAL.java.xml', 26), 'direction': 'after'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 361, "Time": 177.7962191104889, "BestFitness": 3.0, "diff": "*** before: PASCAL.java.xml\n--- after: PASCAL.java.xml\n***************\n*** 32,37 ****\n--- 32,38 ----\n                      upright = 0;\n                  }\n                  row.add(upleft+upright);\n+             row.add(upleft+upright);\n              }\n              rows.add(row);\n          }\n"}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 375, "Time": 173.50476908683777}, {"BestPatch": "StmtInsertion({'target': ('PASCAL.java.xml', 24), 'ingredient': ('PASCAL.java.xml', 26), 'direction': 'after'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 372, "Time": 175.02535605430603, "BestFitness": 3.0, "diff": "*** before: PASCAL.java.xml\n--- after: PASCAL.java.xml\n***************\n*** 32,37 ****\n--- 32,38 ----\n                      upright = 0;\n                  }\n                  row.add(upleft+upright);\n+             row.add(upleft+upright);\n              }\n              rows.add(row);\n          }\n"}, {"BestPatch": "StmtInsertion({'target': ('PASCAL.java.xml', 10), 'ingredient': ('PASCAL.java.xml', 9), 'direction': 'after'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 372, "Time": 174.3064706325531, "BestFitness": 3.0, "diff": "*** before: PASCAL.java.xml\n--- after: PASCAL.java.xml\n***************\n*** 33,38 ****\n--- 33,52 ----\n                  }\n                  row.add(upleft+upright);\n              }\n+             for (int c=0; c<r; c++) {\n+                 int upleft, upright;\n+                 if (c > 0) {\n+                     upleft = rows.get(r-1).get(c-1);\n+                 } else {\n+                     upleft = 0;\n+                 }\n+                 if (c < r) {\n+                     upright = rows.get(r-1).get(c);\n+                 } else {\n+                     upright = 0;\n+                 }\n+                 row.add(upleft+upright);\n+             }\n              rows.add(row);\n          }\n  \n"}, {"BestPatch": "StmtInsertion({'target': ('PASCAL.java.xml', 26), 'ingredient': ('PASCAL.java.xml', 26), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 396, "Time": 164.54176902770996, "BestFitness": 3.0, "diff": "*** before: PASCAL.java.xml\n--- after: PASCAL.java.xml\n***************\n*** 32,37 ****\n--- 32,38 ----\n                      upright = 0;\n                  }\n                  row.add(upleft+upright);\n+             row.add(upleft+upright);\n              }\n              rows.add(row);\n          }\n"}, {"BestPatch": "StmtInsertion({'target': ('PASCAL.java.xml', 24), 'ingredient': ('PASCAL.java.xml', 26), 'direction': 'after'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 381, "Time": 169.62658405303955, "BestFitness": 3.0, "diff": "*** before: PASCAL.java.xml\n--- after: PASCAL.java.xml\n***************\n*** 32,37 ****\n--- 32,38 ----\n                      upright = 0;\n                  }\n                  row.add(upleft+upright);\n+             row.add(upleft+upright);\n              }\n              rows.add(row);\n          }\n"}, {"BestPatch": "StmtInsertion({'target': ('PASCAL.java.xml', 19), 'ingredient': ('PASCAL.java.xml', 26), 'direction': 'after'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 364, "Time": 174.84992623329163, "BestFitness": 3.0, "diff": "*** before: PASCAL.java.xml\n--- after: PASCAL.java.xml\n***************\n*** 32,37 ****\n--- 32,38 ----\n                      upright = 0;\n                  }\n                  row.add(upleft+upright);\n+             row.add(upleft+upright);\n              }\n              rows.add(row);\n          }\n"}, {"BestPatch": "StmtInsertion({'target': ('PASCAL.java.xml', 26), 'ingredient': ('PASCAL.java.xml', 9), 'direction': 'after'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 375, "Time": 171.95154643058777, "BestFitness": 3.0, "diff": "*** before: PASCAL.java.xml\n--- after: PASCAL.java.xml\n***************\n*** 33,38 ****\n--- 33,52 ----\n                  }\n                  row.add(upleft+upright);\n              }\n+             for (int c=0; c<r; c++) {\n+                 int upleft, upright;\n+                 if (c > 0) {\n+                     upleft = rows.get(r-1).get(c-1);\n+                 } else {\n+                     upleft = 0;\n+                 }\n+                 if (c < r) {\n+                     upright = rows.get(r-1).get(c);\n+                 } else {\n+                     upright = 0;\n+                 }\n+                 row.add(upleft+upright);\n+             }\n              rows.add(row);\n          }\n  \n"}, {"BestPatch": "StmtInsertion({'target': ('PASCAL.java.xml', 10), 'ingredient': ('PASCAL.java.xml', 9), 'direction': 'after'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 369, "Time": 173.55058598518372, "BestFitness": 3.0, "diff": "*** before: PASCAL.java.xml\n--- after: PASCAL.java.xml\n***************\n*** 33,38 ****\n--- 33,52 ----\n                  }\n                  row.add(upleft+upright);\n              }\n+             for (int c=0; c<r; c++) {\n+                 int upleft, upright;\n+                 if (c > 0) {\n+                     upleft = rows.get(r-1).get(c-1);\n+                 } else {\n+                     upleft = 0;\n+                 }\n+                 if (c < r) {\n+                     upright = rows.get(r-1).get(c);\n+                 } else {\n+                     upright = 0;\n+                 }\n+                 row.add(upleft+upright);\n+             }\n              rows.add(row);\n          }\n  \n"}, {"BestPatch": "StmtInsertion({'target': ('PASCAL.java.xml', 23), 'ingredient': ('PASCAL.java.xml', 26), 'direction': 'after'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 376, "Time": 172.33442997932434, "BestFitness": 3.0, "diff": "*** before: PASCAL.java.xml\n--- after: PASCAL.java.xml\n***************\n*** 32,37 ****\n--- 32,38 ----\n                      upright = 0;\n                  }\n                  row.add(upleft+upright);\n+             row.add(upleft+upright);\n              }\n              rows.add(row);\n          }\n"}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 379, "Time": 170.93905687332153}, {"BestPatch": "StmtInsertion({'target': ('PASCAL.java.xml', 26), 'ingredient': ('PASCAL.java.xml', 9), 'direction': 'after'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 374, "Time": 175.3458878993988, "BestFitness": 3.0, "diff": "*** before: PASCAL.java.xml\n--- after: PASCAL.java.xml\n***************\n*** 33,38 ****\n--- 33,52 ----\n                  }\n                  row.add(upleft+upright);\n              }\n+             for (int c=0; c<r; c++) {\n+                 int upleft, upright;\n+                 if (c > 0) {\n+                     upleft = rows.get(r-1).get(c-1);\n+                 } else {\n+                     upleft = 0;\n+                 }\n+                 if (c < r) {\n+                     upright = rows.get(r-1).get(c);\n+                 } else {\n+                     upright = 0;\n+                 }\n+                 row.add(upleft+upright);\n+             }\n              rows.add(row);\n          }\n  \n"}, {"BestPatch": "StmtInsertion({'target': ('PASCAL.java.xml', 26), 'ingredient': ('PASCAL.java.xml', 9), 'direction': 'after'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 374, "Time": 173.84018802642822, "BestFitness": 3.0, "diff": "*** before: PASCAL.java.xml\n--- after: PASCAL.java.xml\n***************\n*** 33,38 ****\n--- 33,52 ----\n                  }\n                  row.add(upleft+upright);\n              }\n+             for (int c=0; c<r; c++) {\n+                 int upleft, upright;\n+                 if (c > 0) {\n+                     upleft = rows.get(r-1).get(c-1);\n+                 } else {\n+                     upleft = 0;\n+                 }\n+                 if (c < r) {\n+                     upright = rows.get(r-1).get(c);\n+                 } else {\n+                     upright = 0;\n+                 }\n+                 row.add(upleft+upright);\n+             }\n              rows.add(row);\n          }\n  \n"}, {"BestPatch": "StmtInsertion({'target': ('PASCAL.java.xml', 26), 'ingredient': ('PASCAL.java.xml', 9), 'direction': 'after'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 379, "Time": 170.46581983566284, "BestFitness": 3.0, "diff": "*** before: PASCAL.java.xml\n--- after: PASCAL.java.xml\n***************\n*** 33,38 ****\n--- 33,52 ----\n                  }\n                  row.add(upleft+upright);\n              }\n+             for (int c=0; c<r; c++) {\n+                 int upleft, upright;\n+                 if (c > 0) {\n+                     upleft = rows.get(r-1).get(c-1);\n+                 } else {\n+                     upleft = 0;\n+                 }\n+                 if (c < r) {\n+                     upright = rows.get(r-1).get(c);\n+                 } else {\n+                     upright = 0;\n+                 }\n+                 row.add(upleft+upright);\n+             }\n              rows.add(row);\n          }\n  \n"}, {"BestPatch": "StmtInsertion({'target': ('PASCAL.java.xml', 19), 'ingredient': ('PASCAL.java.xml', 26), 'direction': 'after'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 391, "Time": 165.31637692451477, "BestFitness": 3.0, "diff": "*** before: PASCAL.java.xml\n--- after: PASCAL.java.xml\n***************\n*** 32,37 ****\n--- 32,38 ----\n                      upright = 0;\n                  }\n                  row.add(upleft+upright);\n+             row.add(upleft+upright);\n              }\n              rows.add(row);\n          }\n"}]