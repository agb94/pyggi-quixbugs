[{"BestPatch": "StmtInsertion({'target': ('SIEVE.java.xml', 30), 'ingredient': ('SIEVE.java.xml', 30), 'direction': 'after'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 332, "Time": 199.7355558872223, "BestFitness": 4.0, "diff": "*** before: SIEVE.java.xml\n--- after: SIEVE.java.xml\n***************\n*** 41,47 ****\n              if (any(list_comp(n, primes))) {\n                  primes.add(n);\n              }\n!         }\n          return primes;\n      }\n  }\n--- 41,48 ----\n              if (any(list_comp(n, primes))) {\n                  primes.add(n);\n              }\n!         primes.add(n);\n!             }\n          return primes;\n      }\n  }\n"}, {"BestPatch": "StmtReplacement({'target': ('SIEVE.java.xml', 19), 'ingredient': ('SIEVE.java.xml', 30)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 339, "Time": 195.1762340068817, "BestFitness": 4.0, "diff": "*** before: SIEVE.java.xml\n--- after: SIEVE.java.xml\n***************\n*** 28,37 ****\n  \n      public static ArrayList<Boolean> list_comp(int n, ArrayList<Integer> primes) {\n          ArrayList<Boolean> built_comprehension = new ArrayList<Boolean>();\n! \tfor (Integer p : primes) {\n! \t    built_comprehension.add(n % p > 0);\n! \t}\n! \treturn built_comprehension;\n      }\n  \n  \n--- 28,35 ----\n  \n      public static ArrayList<Boolean> list_comp(int n, ArrayList<Integer> primes) {\n          ArrayList<Boolean> built_comprehension = new ArrayList<Boolean>();\n! \tprimes.add(n);\n!             return built_comprehension;\n      }\n  \n  \n"}, {"BestPatch": "StmtInsertion({'target': ('SIEVE.java.xml', 29), 'ingredient': ('SIEVE.java.xml', 30), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 322, "Time": 203.21655297279358, "BestFitness": 4.0, "diff": "*** before: SIEVE.java.xml\n--- after: SIEVE.java.xml\n***************\n*** 38,44 ****\n      public static ArrayList<Integer> sieve(Integer max) {\n          ArrayList<Integer> primes = new ArrayList<Integer>();\n          for (int n=2; n<max+1; n++) {\n!             if (any(list_comp(n, primes))) {\n                  primes.add(n);\n              }\n          }\n--- 38,45 ----\n      public static ArrayList<Integer> sieve(Integer max) {\n          ArrayList<Integer> primes = new ArrayList<Integer>();\n          for (int n=2; n<max+1; n++) {\n!             if (any(list_comp(n, primes))) primes.add(n);\n!             {\n                  primes.add(n);\n              }\n          }\n"}, {"BestPatch": "StmtInsertion({'target': ('SIEVE.java.xml', 27), 'ingredient': ('SIEVE.java.xml', 30), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 327, "Time": 201.81096816062927, "BestFitness": 4.0, "diff": "*** before: SIEVE.java.xml\n--- after: SIEVE.java.xml\n***************\n*** 38,43 ****\n--- 38,44 ----\n      public static ArrayList<Integer> sieve(Integer max) {\n          ArrayList<Integer> primes = new ArrayList<Integer>();\n          for (int n=2; n<max+1; n++) {\n+             primes.add(n);\n              if (any(list_comp(n, primes))) {\n                  primes.add(n);\n              }\n"}, {"BestPatch": "StmtReplacement({'target': ('SIEVE.java.xml', 27), 'ingredient': ('SIEVE.java.xml', 30)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 357, "Time": 188.00629878044128, "BestFitness": 4.0, "diff": "*** before: SIEVE.java.xml\n--- after: SIEVE.java.xml\n***************\n*** 38,47 ****\n      public static ArrayList<Integer> sieve(Integer max) {\n          ArrayList<Integer> primes = new ArrayList<Integer>();\n          for (int n=2; n<max+1; n++) {\n!             if (any(list_comp(n, primes))) {\n!                 primes.add(n);\n              }\n-         }\n          return primes;\n      }\n  }\n--- 38,45 ----\n      public static ArrayList<Integer> sieve(Integer max) {\n          ArrayList<Integer> primes = new ArrayList<Integer>();\n          for (int n=2; n<max+1; n++) {\n!             primes.add(n);\n              }\n          return primes;\n      }\n  }\n"}, {"BestPatch": "StmtInsertion({'target': ('SIEVE.java.xml', 29), 'ingredient': ('SIEVE.java.xml', 28), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 325, "Time": 202.1140251159668, "BestFitness": 4.0, "diff": "*** before: SIEVE.java.xml\n--- after: SIEVE.java.xml\n***************\n*** 38,44 ****\n      public static ArrayList<Integer> sieve(Integer max) {\n          ArrayList<Integer> primes = new ArrayList<Integer>();\n          for (int n=2; n<max+1; n++) {\n!             if (any(list_comp(n, primes))) {\n                  primes.add(n);\n              }\n          }\n--- 38,47 ----\n      public static ArrayList<Integer> sieve(Integer max) {\n          ArrayList<Integer> primes = new ArrayList<Integer>();\n          for (int n=2; n<max+1; n++) {\n!             if (any(list_comp(n, primes)))  {\n!                 primes.add(n);\n!             }\n!         {\n                  primes.add(n);\n              }\n          }\n"}, {"BestPatch": "StmtReplacement({'target': ('SIEVE.java.xml', 16), 'ingredient': ('SIEVE.java.xml', 1)}) | StmtInsertion({'target': ('SIEVE.java.xml', 13), 'ingredient': ('SIEVE.java.xml', 7), 'direction': 'after'}) | StmtReplacement({'target': ('SIEVE.java.xml', 11), 'ingredient': ('SIEVE.java.xml', 4)})", "Success": true, "FitnessEval": 175, "InvalidPatch": 126, "Time": 65.43779134750366, "BestFitness": 0.0, "diff": "*** before: SIEVE.java.xml\n--- after: SIEVE.java.xml\n***************\n*** 20,29 ****\n      }\n  \n      public static boolean any(ArrayList<Boolean> arr) {\n!     \tfor (boolean value: arr) {\n! \t    if (value) { return true; } \n  \t}\n! \treturn false;\n      }\n  \n      public static ArrayList<Boolean> list_comp(int n, ArrayList<Integer> primes) {\n--- 20,33 ----\n      }\n  \n      public static boolean any(ArrayList<Boolean> arr) {\n!     \tfor (boolean value: arr) if (!value) { return false; }\n! \t{\n!     \tfor (boolean value : arr) {\n! \t    if (!value) { return false; }\n  \t}\n! \treturn true;\n!     }\n! \n      }\n  \n      public static ArrayList<Boolean> list_comp(int n, ArrayList<Integer> primes) {\n"}, {"BestPatch": "StmtReplacement({'target': ('SIEVE.java.xml', 19), 'ingredient': ('SIEVE.java.xml', 28)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 337, "Time": 197.50511956214905, "BestFitness": 4.0, "diff": "*** before: SIEVE.java.xml\n--- after: SIEVE.java.xml\n***************\n*** 28,37 ****\n  \n      public static ArrayList<Boolean> list_comp(int n, ArrayList<Integer> primes) {\n          ArrayList<Boolean> built_comprehension = new ArrayList<Boolean>();\n! \tfor (Integer p : primes) {\n! \t    built_comprehension.add(n % p > 0);\n! \t}\n! \treturn built_comprehension;\n      }\n  \n  \n--- 28,37 ----\n  \n      public static ArrayList<Boolean> list_comp(int n, ArrayList<Integer> primes) {\n          ArrayList<Boolean> built_comprehension = new ArrayList<Boolean>();\n! \t {\n!                 primes.add(n);\n!             }\n!         return built_comprehension;\n      }\n  \n  \n"}, {"BestPatch": "StmtReplacement({'target': ('SIEVE.java.xml', 9), 'ingredient': ('SIEVE.java.xml', 14)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 357, "Time": 188.8972659111023, "BestFitness": 4.0, "diff": "*** before: SIEVE.java.xml\n--- after: SIEVE.java.xml\n***************\n*** 19,32 ****\n  \treturn true;\n      }\n  \n!     public static boolean any(ArrayList<Boolean> arr) {\n!     \tfor (boolean value: arr) {\n! \t    if (value) { return true; } \n! \t}\n! \treturn false;\n!     }\n! \n!     public static ArrayList<Boolean> list_comp(int n, ArrayList<Integer> primes) {\n          ArrayList<Boolean> built_comprehension = new ArrayList<Boolean>();\n  \tfor (Integer p : primes) {\n  \t    built_comprehension.add(n % p > 0);\n--- 19,25 ----\n  \treturn true;\n      }\n  \n!     public static boolean any(ArrayList<Boolean> arr) { return true; }public static ArrayList<Boolean> list_comp(int n, ArrayList<Integer> primes) {\n          ArrayList<Boolean> built_comprehension = new ArrayList<Boolean>();\n  \tfor (Integer p : primes) {\n  \t    built_comprehension.add(n % p > 0);\n"}, {"BestPatch": "StmtReplacement({'target': ('SIEVE.java.xml', 26), 'ingredient': ('SIEVE.java.xml', 29)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 301, "Time": 212.88570141792297, "BestFitness": 4.0, "diff": "*** before: SIEVE.java.xml\n--- after: SIEVE.java.xml\n***************\n*** 38,47 ****\n      public static ArrayList<Integer> sieve(Integer max) {\n          ArrayList<Integer> primes = new ArrayList<Integer>();\n          for (int n=2; n<max+1; n++) {\n-             if (any(list_comp(n, primes))) {\n                  primes.add(n);\n              }\n-         }\n          return primes;\n      }\n  }\n--- 38,45 ----\n"}, {"BestPatch": "StmtInsertion({'target': ('SIEVE.java.xml', 19), 'ingredient': ('SIEVE.java.xml', 28), 'direction': 'after'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 375, "Time": 180.33607053756714, "BestFitness": 4.0, "diff": "*** before: SIEVE.java.xml\n--- after: SIEVE.java.xml\n***************\n*** 31,37 ****\n  \tfor (Integer p : primes) {\n  \t    built_comprehension.add(n % p > 0);\n  \t}\n! \treturn built_comprehension;\n      }\n  \n  \n--- 31,40 ----\n  \tfor (Integer p : primes) {\n  \t    built_comprehension.add(n % p > 0);\n  \t}\n! \t {\n!                 primes.add(n);\n!             }\n!         return built_comprehension;\n      }\n  \n  \n"}, {"BestPatch": "StmtReplacement({'target': ('SIEVE.java.xml', 16), 'ingredient': ('SIEVE.java.xml', 15)}) | StmtReplacement({'target': ('SIEVE.java.xml', 12), 'ingredient': ('SIEVE.java.xml', 3)})", "Success": true, "FitnessEval": 51, "InvalidPatch": 29, "Time": 22.193459272384644, "BestFitness": 0.0, "diff": "*** before: SIEVE.java.xml\n--- after: SIEVE.java.xml\n***************\n*** 21,30 ****\n  \n      public static boolean any(ArrayList<Boolean> arr) {\n      \tfor (boolean value: arr) {\n! \t    if (value) { return true; } \n  \t}\n! \treturn false;\n!     }\n  \n      public static ArrayList<Boolean> list_comp(int n, ArrayList<Integer> primes) {\n          ArrayList<Boolean> built_comprehension = new ArrayList<Boolean>();\n--- 21,32 ----\n  \n      public static boolean any(ArrayList<Boolean> arr) {\n      \tfor (boolean value: arr) {\n! \t    {\n! \t    if (!value) { return false; }\n  \t}\n! \t \n! \t}\n! \treturn true;}\n  \n      public static ArrayList<Boolean> list_comp(int n, ArrayList<Integer> primes) {\n          ArrayList<Boolean> built_comprehension = new ArrayList<Boolean>();\n"}, {"BestPatch": "StmtInsertion({'target': ('SIEVE.java.xml', 18), 'ingredient': ('SIEVE.java.xml', 30), 'direction': 'after'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 380, "Time": 178.64645075798035, "BestFitness": 4.0, "diff": "*** before: SIEVE.java.xml\n--- after: SIEVE.java.xml\n***************\n*** 28,34 ****\n  \n      public static ArrayList<Boolean> list_comp(int n, ArrayList<Integer> primes) {\n          ArrayList<Boolean> built_comprehension = new ArrayList<Boolean>();\n! \tfor (Integer p : primes) {\n  \t    built_comprehension.add(n % p > 0);\n  \t}\n  \treturn built_comprehension;\n--- 28,35 ----\n  \n      public static ArrayList<Boolean> list_comp(int n, ArrayList<Integer> primes) {\n          ArrayList<Boolean> built_comprehension = new ArrayList<Boolean>();\n! \tprimes.add(n);\n!             for (Integer p : primes) {\n  \t    built_comprehension.add(n % p > 0);\n  \t}\n  \treturn built_comprehension;\n"}, {"BestPatch": "StmtInsertion({'target': ('SIEVE.java.xml', 29), 'ingredient': ('SIEVE.java.xml', 29), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 334, "Time": 198.78514075279236, "BestFitness": 4.0, "diff": "*** before: SIEVE.java.xml\n--- after: SIEVE.java.xml\n***************\n*** 41,46 ****\n--- 41,49 ----\n              if (any(list_comp(n, primes))) {\n                  primes.add(n);\n              }\n+         {\n+                 primes.add(n);\n+             }\n          }\n          return primes;\n      }\n"}, {"BestPatch": "StmtInsertion({'target': ('SIEVE.java.xml', 19), 'ingredient': ('SIEVE.java.xml', 28), 'direction': 'after'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 319, "Time": 207.3186457157135, "BestFitness": 4.0, "diff": "*** before: SIEVE.java.xml\n--- after: SIEVE.java.xml\n***************\n*** 31,37 ****\n  \tfor (Integer p : primes) {\n  \t    built_comprehension.add(n % p > 0);\n  \t}\n! \treturn built_comprehension;\n      }\n  \n  \n--- 31,40 ----\n  \tfor (Integer p : primes) {\n  \t    built_comprehension.add(n % p > 0);\n  \t}\n! \t {\n!                 primes.add(n);\n!             }\n!         return built_comprehension;\n      }\n  \n  \n"}, {"BestPatch": "StmtReplacement({'target': ('SIEVE.java.xml', 16), 'ingredient': ('SIEVE.java.xml', 15)}) | StmtReplacement({'target': ('SIEVE.java.xml', 11), 'ingredient': ('SIEVE.java.xml', 3)})", "Success": true, "FitnessEval": 307, "InvalidPatch": 224, "Time": 115.05779099464417, "BestFitness": 0.0, "diff": "*** before: SIEVE.java.xml\n--- after: SIEVE.java.xml\n***************\n*** 21,30 ****\n  \n      public static boolean any(ArrayList<Boolean> arr) {\n      \tfor (boolean value: arr) {\n! \t    if (value) { return true; } \n  \t}\n! \treturn false;\n!     }\n  \n      public static ArrayList<Boolean> list_comp(int n, ArrayList<Integer> primes) {\n          ArrayList<Boolean> built_comprehension = new ArrayList<Boolean>();\n--- 21,29 ----\n  \n      public static boolean any(ArrayList<Boolean> arr) {\n      \tfor (boolean value: arr) {\n! \t    if (!value) { return false; }\n  \t}\n! \treturn true;}\n  \n      public static ArrayList<Boolean> list_comp(int n, ArrayList<Integer> primes) {\n          ArrayList<Boolean> built_comprehension = new ArrayList<Boolean>();\n"}, {"BestPatch": "StmtInsertion({'target': ('SIEVE.java.xml', 29), 'ingredient': ('SIEVE.java.xml', 26), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 351, "Time": 192.8907549381256, "BestFitness": 4.0, "diff": "*** before: SIEVE.java.xml\n--- after: SIEVE.java.xml\n***************\n*** 39,44 ****\n--- 39,49 ----\n          ArrayList<Integer> primes = new ArrayList<Integer>();\n          for (int n=2; n<max+1; n++) {\n              if (any(list_comp(n, primes))) {\n+             if (any(list_comp(n, primes))) {\n+                 primes.add(n);\n+             }\n+         }\n+         {\n                  primes.add(n);\n              }\n          }\n"}, {"BestPatch": "StmtInsertion({'target': ('SIEVE.java.xml', 28), 'ingredient': ('SIEVE.java.xml', 31), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 320, "Time": 212.3221230506897, "BestFitness": 4.0, "diff": "*** before: SIEVE.java.xml\n--- after: SIEVE.java.xml\n***************\n*** 38,44 ****\n      public static ArrayList<Integer> sieve(Integer max) {\n          ArrayList<Integer> primes = new ArrayList<Integer>();\n          for (int n=2; n<max+1; n++) {\n!             if (any(list_comp(n, primes))) {\n                  primes.add(n);\n              }\n          }\n--- 38,45 ----\n      public static ArrayList<Integer> sieve(Integer max) {\n          ArrayList<Integer> primes = new ArrayList<Integer>();\n          for (int n=2; n<max+1; n++) {\n!             if (any(list_comp(n, primes)))return primes;\n!      {\n                  primes.add(n);\n              }\n          }\n"}, {"BestPatch": "StmtInsertion({'target': ('SIEVE.java.xml', 22), 'ingredient': ('SIEVE.java.xml', 28), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 340, "Time": 216.55161929130554, "BestFitness": 4.0, "diff": "*** before: SIEVE.java.xml\n--- after: SIEVE.java.xml\n***************\n*** 31,37 ****\n  \tfor (Integer p : primes) {\n  \t    built_comprehension.add(n % p > 0);\n  \t}\n! \treturn built_comprehension;\n      }\n  \n  \n--- 31,40 ----\n  \tfor (Integer p : primes) {\n  \t    built_comprehension.add(n % p > 0);\n  \t}\n! \t {\n!                 primes.add(n);\n!             }\n!         return built_comprehension;\n      }\n  \n  \n"}, {"BestPatch": "StmtInsertion({'target': ('SIEVE.java.xml', 29), 'ingredient': ('SIEVE.java.xml', 26), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 338, "Time": 196.54640793800354, "BestFitness": 4.0, "diff": "*** before: SIEVE.java.xml\n--- after: SIEVE.java.xml\n***************\n*** 39,44 ****\n--- 39,49 ----\n          ArrayList<Integer> primes = new ArrayList<Integer>();\n          for (int n=2; n<max+1; n++) {\n              if (any(list_comp(n, primes))) {\n+             if (any(list_comp(n, primes))) {\n+                 primes.add(n);\n+             }\n+         }\n+         {\n                  primes.add(n);\n              }\n          }\n"}]