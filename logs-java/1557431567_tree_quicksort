[{"BestPatch": "StmtReplacement({'target': ('QUICKSORT.java.xml', 16), 'ingredient': ('QUICKSORT.java.xml', 19)})", "Success": true, "FitnessEval": 66, "InvalidPatch": 39, "Time": 127.8179144859314, "BestFitness": 0.0, "diff": "*** before: QUICKSORT.java.xml\n--- after: QUICKSORT.java.xml\n***************\n*** 23,32 ****\n          for (Integer x : arr.subList(1, arr.size())) {\n              if (x < pivot) {\n                  lesser.add(x);\n!             } else if (x > pivot) {\n!                 greater.add(x);\n              }\n-         }\n          ArrayList<Integer> middle = new ArrayList<Integer>();\n          middle.add(pivot);\n          lesser = quicksort(lesser);\n--- 23,30 ----\n          for (Integer x : arr.subList(1, arr.size())) {\n              if (x < pivot) {\n                  lesser.add(x);\n!             } else greater.add(x);\n              }\n          ArrayList<Integer> middle = new ArrayList<Integer>();\n          middle.add(pivot);\n          lesser = quicksort(lesser);\n"}, {"BestPatch": "StmtReplacement({'target': ('QUICKSORT.java.xml', 16), 'ingredient': ('QUICKSORT.java.xml', 17)})", "Success": true, "FitnessEval": 74, "InvalidPatch": 50, "Time": 40.664960861206055, "BestFitness": 0.0, "diff": "*** before: QUICKSORT.java.xml\n--- after: QUICKSORT.java.xml\n***************\n*** 23,29 ****\n          for (Integer x : arr.subList(1, arr.size())) {\n              if (x < pivot) {\n                  lesser.add(x);\n!             } else if (x > pivot) {\n                  greater.add(x);\n              }\n          }\n--- 23,29 ----\n          for (Integer x : arr.subList(1, arr.size())) {\n              if (x < pivot) {\n                  lesser.add(x);\n!             } else  {\n                  greater.add(x);\n              }\n          }\n"}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 325, "Time": 819.3995273113251}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 330, "Time": 1243.5680921077728}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 333, "Time": 1039.147979259491}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 323, "Time": 732.3196046352386}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 350, "Time": 746.201263666153}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 328, "Time": 750.9430751800537}, {"BestPatch": "StmtReplacement({'target': ('QUICKSORT.java.xml', 16), 'ingredient': ('QUICKSORT.java.xml', 17)})", "Success": true, "FitnessEval": 242, "InvalidPatch": 157, "Time": 305.08656549453735, "BestFitness": 0.0, "diff": "*** before: QUICKSORT.java.xml\n--- after: QUICKSORT.java.xml\n***************\n*** 23,29 ****\n          for (Integer x : arr.subList(1, arr.size())) {\n              if (x < pivot) {\n                  lesser.add(x);\n!             } else if (x > pivot) {\n                  greater.add(x);\n              }\n          }\n--- 23,29 ----\n          for (Integer x : arr.subList(1, arr.size())) {\n              if (x < pivot) {\n                  lesser.add(x);\n!             } else  {\n                  greater.add(x);\n              }\n          }\n"}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 355, "Time": 705.9144296646118}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 339, "Time": 525.1014399528503}, {"BestPatch": "StmtReplacement({'target': ('QUICKSORT.java.xml', 16), 'ingredient': ('QUICKSORT.java.xml', 19)})", "Success": true, "FitnessEval": 447, "InvalidPatch": 304, "Time": 765.5564961433411, "BestFitness": 0.0, "diff": "*** before: QUICKSORT.java.xml\n--- after: QUICKSORT.java.xml\n***************\n*** 23,32 ****\n          for (Integer x : arr.subList(1, arr.size())) {\n              if (x < pivot) {\n                  lesser.add(x);\n!             } else if (x > pivot) {\n!                 greater.add(x);\n              }\n-         }\n          ArrayList<Integer> middle = new ArrayList<Integer>();\n          middle.add(pivot);\n          lesser = quicksort(lesser);\n--- 23,30 ----\n          for (Integer x : arr.subList(1, arr.size())) {\n              if (x < pivot) {\n                  lesser.add(x);\n!             } else greater.add(x);\n              }\n          ArrayList<Integer> middle = new ArrayList<Integer>();\n          middle.add(pivot);\n          lesser = quicksort(lesser);\n"}, {"BestPatch": "StmtReplacement({'target': ('QUICKSORT.java.xml', 16), 'ingredient': ('QUICKSORT.java.xml', 19)})", "Success": true, "FitnessEval": 277, "InvalidPatch": 188, "Time": 426.96499371528625, "BestFitness": 0.0, "diff": "*** before: QUICKSORT.java.xml\n--- after: QUICKSORT.java.xml\n***************\n*** 23,32 ****\n          for (Integer x : arr.subList(1, arr.size())) {\n              if (x < pivot) {\n                  lesser.add(x);\n!             } else if (x > pivot) {\n!                 greater.add(x);\n              }\n-         }\n          ArrayList<Integer> middle = new ArrayList<Integer>();\n          middle.add(pivot);\n          lesser = quicksort(lesser);\n--- 23,30 ----\n          for (Integer x : arr.subList(1, arr.size())) {\n              if (x < pivot) {\n                  lesser.add(x);\n!             } else greater.add(x);\n              }\n          ArrayList<Integer> middle = new ArrayList<Integer>();\n          middle.add(pivot);\n          lesser = quicksort(lesser);\n"}, {"BestPatch": "StmtReplacement({'target': ('QUICKSORT.java.xml', 16), 'ingredient': ('QUICKSORT.java.xml', 17)})", "Success": true, "FitnessEval": 38, "InvalidPatch": 25, "Time": 21.785000562667847, "BestFitness": 0.0, "diff": "*** before: QUICKSORT.java.xml\n--- after: QUICKSORT.java.xml\n***************\n*** 23,29 ****\n          for (Integer x : arr.subList(1, arr.size())) {\n              if (x < pivot) {\n                  lesser.add(x);\n!             } else if (x > pivot) {\n                  greater.add(x);\n              }\n          }\n--- 23,29 ----\n          for (Integer x : arr.subList(1, arr.size())) {\n              if (x < pivot) {\n                  lesser.add(x);\n!             } else  {\n                  greater.add(x);\n              }\n          }\n"}, {"BestPatch": "StmtReplacement({'target': ('QUICKSORT.java.xml', 16), 'ingredient': ('QUICKSORT.java.xml', 19)})", "Success": true, "FitnessEval": 461, "InvalidPatch": 304, "Time": 513.6758065223694, "BestFitness": 0.0, "diff": "*** before: QUICKSORT.java.xml\n--- after: QUICKSORT.java.xml\n***************\n*** 23,32 ****\n          for (Integer x : arr.subList(1, arr.size())) {\n              if (x < pivot) {\n                  lesser.add(x);\n!             } else if (x > pivot) {\n!                 greater.add(x);\n              }\n-         }\n          ArrayList<Integer> middle = new ArrayList<Integer>();\n          middle.add(pivot);\n          lesser = quicksort(lesser);\n--- 23,30 ----\n          for (Integer x : arr.subList(1, arr.size())) {\n              if (x < pivot) {\n                  lesser.add(x);\n!             } else greater.add(x);\n              }\n          ArrayList<Integer> middle = new ArrayList<Integer>();\n          middle.add(pivot);\n          lesser = quicksort(lesser);\n"}, {"BestPatch": "StmtReplacement({'target': ('QUICKSORT.java.xml', 16), 'ingredient': ('QUICKSORT.java.xml', 17)})", "Success": true, "FitnessEval": 134, "InvalidPatch": 88, "Time": 238.5189368724823, "BestFitness": 0.0, "diff": "*** before: QUICKSORT.java.xml\n--- after: QUICKSORT.java.xml\n***************\n*** 23,29 ****\n          for (Integer x : arr.subList(1, arr.size())) {\n              if (x < pivot) {\n                  lesser.add(x);\n!             } else if (x > pivot) {\n                  greater.add(x);\n              }\n          }\n--- 23,29 ----\n          for (Integer x : arr.subList(1, arr.size())) {\n              if (x < pivot) {\n                  lesser.add(x);\n!             } else  {\n                  greater.add(x);\n              }\n          }\n"}, {"BestPatch": "StmtReplacement({'target': ('QUICKSORT.java.xml', 16), 'ingredient': ('QUICKSORT.java.xml', 18)})", "Success": true, "FitnessEval": 175, "InvalidPatch": 110, "Time": 625.0861876010895, "BestFitness": 0.0, "diff": "*** before: QUICKSORT.java.xml\n--- after: QUICKSORT.java.xml\n***************\n*** 23,29 ****\n          for (Integer x : arr.subList(1, arr.size())) {\n              if (x < pivot) {\n                  lesser.add(x);\n!             } else if (x > pivot) {\n                  greater.add(x);\n              }\n          }\n--- 23,29 ----\n          for (Integer x : arr.subList(1, arr.size())) {\n              if (x < pivot) {\n                  lesser.add(x);\n!             } else {\n                  greater.add(x);\n              }\n          }\n"}, {"BestPatch": "StmtReplacement({'target': ('QUICKSORT.java.xml', 16), 'ingredient': ('QUICKSORT.java.xml', 19)})", "Success": true, "FitnessEval": 170, "InvalidPatch": 114, "Time": 95.23855996131897, "BestFitness": 0.0, "diff": "*** before: QUICKSORT.java.xml\n--- after: QUICKSORT.java.xml\n***************\n*** 23,32 ****\n          for (Integer x : arr.subList(1, arr.size())) {\n              if (x < pivot) {\n                  lesser.add(x);\n!             } else if (x > pivot) {\n!                 greater.add(x);\n              }\n-         }\n          ArrayList<Integer> middle = new ArrayList<Integer>();\n          middle.add(pivot);\n          lesser = quicksort(lesser);\n--- 23,30 ----\n          for (Integer x : arr.subList(1, arr.size())) {\n              if (x < pivot) {\n                  lesser.add(x);\n!             } else greater.add(x);\n              }\n          ArrayList<Integer> middle = new ArrayList<Integer>();\n          middle.add(pivot);\n          lesser = quicksort(lesser);\n"}, {"BestPatch": "StmtReplacement({'target': ('QUICKSORT.java.xml', 16), 'ingredient': ('QUICKSORT.java.xml', 18)})", "Success": true, "FitnessEval": 55, "InvalidPatch": 34, "Time": 34.17453646659851, "BestFitness": 0.0, "diff": "*** before: QUICKSORT.java.xml\n--- after: QUICKSORT.java.xml\n***************\n*** 23,29 ****\n          for (Integer x : arr.subList(1, arr.size())) {\n              if (x < pivot) {\n                  lesser.add(x);\n!             } else if (x > pivot) {\n                  greater.add(x);\n              }\n          }\n--- 23,29 ----\n          for (Integer x : arr.subList(1, arr.size())) {\n              if (x < pivot) {\n                  lesser.add(x);\n!             } else {\n                  greater.add(x);\n              }\n          }\n"}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 342, "Time": 1075.1052341461182}]