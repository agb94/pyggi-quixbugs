[{"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 318, "Time": 4478.98286318779}, {"BestPatch": "LineInsertion({'target': ('FIND_FIRST_IN_SORTED.java', 25), 'ingredient': ('FIND_FIRST_IN_SORTED.java', 30), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 295, "Time": 3147.6065576076508, "BestFitness": 2.0, "diff": "*** before: FIND_FIRST_IN_SORTED.java\n--- after: FIND_FIRST_IN_SORTED.java\n***************\n*** 23,28 ****\n--- 23,29 ----\n                  return mid;\n              } else if (x <= arr[mid]) {\n                  hi = mid;\n+         return -1;\n              } else {\n                  lo = mid + 1;\n              }\n"}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 302, "Time": 4795.526755571365}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 290, "Time": 5557.894293785095}, {"BestPatch": "LineInsertion({'target': ('FIND_FIRST_IN_SORTED.java', 24), 'ingredient': ('FIND_FIRST_IN_SORTED.java', 26), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 285, "Time": 3989.915107488632, "BestFitness": 2.0, "diff": "*** before: FIND_FIRST_IN_SORTED.java\n--- after: FIND_FIRST_IN_SORTED.java\n***************\n*** 22,27 ****\n--- 22,28 ----\n              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                  return mid;\n              } else if (x <= arr[mid]) {\n+                 lo = mid + 1;\n                  hi = mid;\n              } else {\n                  lo = mid + 1;\n"}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 282, "Time": 5532.072157382965}, {"BestPatch": "LineReplacement({'target': ('FIND_FIRST_IN_SORTED.java', 24), 'ingredient': ('FIND_FIRST_IN_SORTED.java', 30)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 308, "Time": 4703.35596203804, "BestFitness": 2.0, "diff": "*** before: FIND_FIRST_IN_SORTED.java\n--- after: FIND_FIRST_IN_SORTED.java\n***************\n*** 22,28 ****\n              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                  return mid;\n              } else if (x <= arr[mid]) {\n!                 hi = mid;\n              } else {\n                  lo = mid + 1;\n              }\n--- 22,28 ----\n              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                  return mid;\n              } else if (x <= arr[mid]) {\n!         return -1;\n              } else {\n                  lo = mid + 1;\n              }\n"}, {"BestPatch": "LineInsertion({'target': ('FIND_FIRST_IN_SORTED.java', 28), 'ingredient': ('FIND_FIRST_IN_SORTED.java', 26), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 283, "Time": 2320.0159919261932, "BestFitness": 2.0, "diff": "*** before: FIND_FIRST_IN_SORTED.java\n--- after: FIND_FIRST_IN_SORTED.java\n***************\n*** 26,31 ****\n--- 26,32 ----\n              } else {\n                  lo = mid + 1;\n              }\n+                 lo = mid + 1;\n          }\n  \n          return -1;\n"}, {"BestPatch": "LineInsertion({'target': ('FIND_FIRST_IN_SORTED.java', 25), 'ingredient': ('FIND_FIRST_IN_SORTED.java', 30), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 300, "Time": 4558.518077850342, "BestFitness": 2.0, "diff": "*** before: FIND_FIRST_IN_SORTED.java\n--- after: FIND_FIRST_IN_SORTED.java\n***************\n*** 23,28 ****\n--- 23,29 ----\n                  return mid;\n              } else if (x <= arr[mid]) {\n                  hi = mid;\n+         return -1;\n              } else {\n                  lo = mid + 1;\n              }\n"}, {"BestPatch": "LineInsertion({'target': ('FIND_FIRST_IN_SORTED.java', 25), 'ingredient': ('FIND_FIRST_IN_SORTED.java', 30), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 295, "Time": 4303.102524280548, "BestFitness": 2.0, "diff": "*** before: FIND_FIRST_IN_SORTED.java\n--- after: FIND_FIRST_IN_SORTED.java\n***************\n*** 23,28 ****\n--- 23,29 ----\n                  return mid;\n              } else if (x <= arr[mid]) {\n                  hi = mid;\n+         return -1;\n              } else {\n                  lo = mid + 1;\n              }\n"}, {"BestPatch": "LineInsertion({'target': ('FIND_FIRST_IN_SORTED.java', 24), 'ingredient': ('FIND_FIRST_IN_SORTED.java', 26), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 277, "Time": 2373.740774869919, "BestFitness": 2.0, "diff": "*** before: FIND_FIRST_IN_SORTED.java\n--- after: FIND_FIRST_IN_SORTED.java\n***************\n*** 22,27 ****\n--- 22,28 ----\n              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                  return mid;\n              } else if (x <= arr[mid]) {\n+                 lo = mid + 1;\n                  hi = mid;\n              } else {\n                  lo = mid + 1;\n"}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 286, "Time": 5401.307007551193}, {"BestPatch": "LineInsertion({'target': ('FIND_FIRST_IN_SORTED.java', 20), 'ingredient': ('FIND_FIRST_IN_SORTED.java', 26), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 261, "Time": 1356.233085155487, "BestFitness": 2.0, "diff": "*** before: FIND_FIRST_IN_SORTED.java\n--- after: FIND_FIRST_IN_SORTED.java\n***************\n*** 18,23 ****\n--- 18,24 ----\n  \n          while (lo <= hi) {\n              int mid = (lo + hi) / 2; // check if this is floor division\n+                 lo = mid + 1;\n  \n              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                  return mid;\n"}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 306, "Time": 4624.084330797195}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 315, "Time": 4659.699135303497}, {"BestPatch": "LineInsertion({'target': ('FIND_FIRST_IN_SORTED.java', 21), 'ingredient': ('FIND_FIRST_IN_SORTED.java', 26), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 283, "Time": 1485.01451253891, "BestFitness": 2.0, "diff": "*** before: FIND_FIRST_IN_SORTED.java\n--- after: FIND_FIRST_IN_SORTED.java\n***************\n*** 19,24 ****\n--- 19,25 ----\n          while (lo <= hi) {\n              int mid = (lo + hi) / 2; // check if this is floor division\n  \n+                 lo = mid + 1;\n              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                  return mid;\n              } else if (x <= arr[mid]) {\n"}, {"BestPatch": "LineInsertion({'target': ('FIND_FIRST_IN_SORTED.java', 20), 'ingredient': ('FIND_FIRST_IN_SORTED.java', 26), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 298, "Time": 2215.8673853874207, "BestFitness": 2.0, "diff": "*** before: FIND_FIRST_IN_SORTED.java\n--- after: FIND_FIRST_IN_SORTED.java\n***************\n*** 18,23 ****\n--- 18,24 ----\n  \n          while (lo <= hi) {\n              int mid = (lo + hi) / 2; // check if this is floor division\n+                 lo = mid + 1;\n  \n              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                  return mid;\n"}, {"BestPatch": "LineReplacement({'target': ('FIND_FIRST_IN_SORTED.java', 24), 'ingredient': ('FIND_FIRST_IN_SORTED.java', 30)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 271, "Time": 2715.3118171691895, "BestFitness": 2.0, "diff": "*** before: FIND_FIRST_IN_SORTED.java\n--- after: FIND_FIRST_IN_SORTED.java\n***************\n*** 22,28 ****\n              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                  return mid;\n              } else if (x <= arr[mid]) {\n!                 hi = mid;\n              } else {\n                  lo = mid + 1;\n              }\n--- 22,28 ----\n              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                  return mid;\n              } else if (x <= arr[mid]) {\n!         return -1;\n              } else {\n                  lo = mid + 1;\n              }\n"}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 304, "Time": 5073.942499160767}, {"BestPatch": "None", "Success": false, "FitnessEval": 500, "InvalidPatch": 300, "Time": 4698.968551158905}]