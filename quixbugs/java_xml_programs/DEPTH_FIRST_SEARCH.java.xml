<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="home/aymeric/git/QuixBugs/java_programs/DEPTH_FIRST_SEARCH.java"><package>package <name>java_programs</name>;</package>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<comment type="block">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */</comment>

<comment type="block" format="javadoc">/**
 *
 * @author derricklin
 */</comment>
<class><specifier>public</specifier> class <name>DEPTH_FIRST_SEARCH</name> <block>{
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>depth_first_search</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>startnode</name></decl></parameter>, <parameter><decl><type><name>Node</name></type> <name>goalnode</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>&gt;</argument_list></name></type> <name>nodesvisited</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <class>class <name>Search</name> <block>{
            <function><type><name>boolean</name></type> <name>search</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{
                <if>if <condition>(<expr><call><name><name>nodesvisited</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                }</block></then> <elseif>else <if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>goalnode</name></expr>)</condition><then> <block>{
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                }</block></then></if></elseif> <else>else <block>{
                    <for>for <control>(<init><decl><type><name>Node</name></type> <name>successornodes</name> <range>: <expr><call><name><name>node</name><operator>.</operator><name>getSuccessors</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
	                    <if>if <condition>(<expr><call><name>search</name><argument_list>(<argument><expr><name>successornodes</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{ <return>return <expr><literal type="boolean">true</literal></expr>;</return> }</block></then></if>
                    }</block></for>
                }</block></else></if>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></function>
        }</block></class><empty_stmt>;</empty_stmt>

        <decl_stmt><decl><type><name>Search</name></type> <name>s</name> <init>= <expr><operator>new</operator> <call><name>Search</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>s</name><operator>.</operator><name>search</name></name><argument_list>(<argument><expr><name>startnode</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
