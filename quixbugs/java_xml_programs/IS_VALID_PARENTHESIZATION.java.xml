<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="home/aymeric/git/QuixBugs/java_programs/IS_VALID_PARENTHESIZATION.java"><package>package <name>java_programs</name>;</package>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<comment type="block">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */</comment>

<comment type="block" format="javadoc">/**
 *
 * @author derricklin
 */</comment>
<class><specifier>public</specifier> class <name>IS_VALID_PARENTHESIZATION</name> <block>{
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Boolean</name></type> <name>is_valid_parenthesization</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>parens</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>depth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>parens</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
	    <decl_stmt><decl><type><name>Character</name></type> <name>paren</name> <init>= <expr><call><name><name>parens</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <if>if <condition>(<expr><call><name><name>paren</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>depth</name><operator>++</operator></expr>;</expr_stmt>
	    }</block></then> <else>else <block>{
		<expr_stmt><expr><name>depth</name><operator>--</operator></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>depth</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{ <return>return <expr><literal type="boolean">false</literal></expr>;</return> }</block></then></if>
	    }</block></else></if>
	}</block></for>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>
}</block></class>
</unit>
