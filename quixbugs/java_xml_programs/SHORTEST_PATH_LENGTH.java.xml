<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="home/aymeric/git/QuixBugs/java_programs/SHORTEST_PATH_LENGTH.java"><package>package <name>java_programs</name>;</package>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<comment type="block" format="javadoc">/**
 *
 * @author Angela Chen
 */</comment>

<class><specifier>public</specifier> class <name>SHORTEST_PATH_LENGTH</name> <block>{
    <function><specifier>public</specifier> <type><name>int</name></type> <name>shortest_path_length</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>&gt;</argument_list></name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>length_by_edge</name></decl></parameter>, <parameter><decl><type><name>Node</name></type> <name>startnode</name></decl></parameter>, <parameter><decl><type><name>Node</name></type> <name>goalnode</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>length_by_edge</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// the shortest distance from source to each node</comment>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>unvisitedNodes</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>&gt;</argument_list></name></type> <name>visitedNodes</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>unvisitedNodes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>startnode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while>while <condition>(<expr><operator>!</operator><call><name><name>unvisitedNodes</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><call><name>getNodeWithMinDistance</name><argument_list>(<argument><expr><name>unvisitedNodes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>distance</name> <init>= <expr><call><name><name>unvisitedNodes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>unvisitedNodes</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><call><name><name>node</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>goalnode</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>distance</name></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>visitedNodes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for>for <control>(<init><decl><type><name>Node</name></type> <name>nextnode</name> <range>: <expr><call><name><name>node</name><operator>.</operator><name>getSuccessors</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
                <if>if <condition>(<expr><call><name><name>visitedNodes</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>nextnode</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <continue>continue;</continue>
                }</block></then></if>

                <if>if <condition>(<expr><call><name><name>unvisitedNodes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>nextnode</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>unvisitedNodes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>nextnode</name></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <expr_stmt><expr><call><name><name>unvisitedNodes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>nextnode</name></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><call><name><name>unvisitedNodes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>nextnode</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>unvisitedNodes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>nextnode</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>length_by_edge</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>nextnode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></while>

        <return>return <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>Node</name></type> <name>getNodeWithMinDistance</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>,<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>list</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Node</name></type> <name>minNode</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>minDistance</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Node</name></type> <name>node</name> <range>: <expr><call><name><name>list</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>distance</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>distance</name> <operator>&lt;</operator> <name>minDistance</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>minDistance</name> <operator>=</operator> <name>distance</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>minNode</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>minNode</name></expr>;</return>
    }</block></function>
}</block></class></unit>
