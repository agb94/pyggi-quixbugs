[{"BestPatch": "LineReplacement({'target': ('find_first_in_sorted.py', 2), 'ingredient': ('find_first_in_sorted.py', 12)}) | LineReplacement({'target': ('find_first_in_sorted.py', 1), 'ingredient': ('find_first_in_sorted.py', 16)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 240, "Time": 202.05992722511292, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 1,6 ****\n  def find_first_in_sorted(arr, x):\n!     lo = 0\n!     hi = len(arr)\n  \n      while lo <= hi:\n          mid = (lo + hi) // 2\n--- 1,6 ----\n  def find_first_in_sorted(arr, x):\n!     return -1\n! \n  \n      while lo <= hi:\n          mid = (lo + hi) // 2\n"}, {"BestPatch": "LineInsertion({'target': ('find_first_in_sorted.py', 4), 'ingredient': ('find_first_in_sorted.py', 16), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 276, "Time": 511.66251945495605, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 2,7 ****\n--- 2,8 ----\n      lo = 0\n      hi = len(arr)\n  \n+     return -1\n      while lo <= hi:\n          mid = (lo + hi) // 2\n  \n"}, {"BestPatch": "LineDeletion({'target': ('find_first_in_sorted.py', 10)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 257, "Time": 762.037321805954, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 8,14 ****\n          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n              return mid\n  \n!         elif x <= arr[mid]:\n              hi = mid\n  \n          else:\n--- 8,14 ----\n          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n              return mid\n  \n! \n              hi = mid\n  \n          else:\n"}, {"BestPatch": "LineInsertion({'target': ('find_first_in_sorted.py', 1), 'ingredient': ('find_first_in_sorted.py', 16), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 256, "Time": 521.5879726409912, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 1,4 ****\n--- 1,5 ----\n  def find_first_in_sorted(arr, x):\n+     return -1\n      lo = 0\n      hi = len(arr)\n  \n"}, {"BestPatch": "LineDeletion({'target': ('find_first_in_sorted.py', 2)}) | LineInsertion({'target': ('find_first_in_sorted.py', 15), 'ingredient': ('find_first_in_sorted.py', 0), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 243, "Time": 72.19803404808044, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 1,6 ****\n  def find_first_in_sorted(arr, x):\n      lo = 0\n!     hi = len(arr)\n  \n      while lo <= hi:\n          mid = (lo + hi) // 2\n--- 1,6 ----\n  def find_first_in_sorted(arr, x):\n      lo = 0\n! \n  \n      while lo <= hi:\n          mid = (lo + hi) // 2\n***************\n*** 13,17 ****\n--- 13,18 ----\n  \n          else:\n              lo = mid + 1\n+ def find_first_in_sorted(arr, x):\n  \n      return -1\n"}, {"BestPatch": "LineDeletion({'target': ('find_first_in_sorted.py', 5)}) | LineInsertion({'target': ('find_first_in_sorted.py', 1), 'ingredient': ('find_first_in_sorted.py', 16), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 219, "Time": 82.20717477798462, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 1,9 ****\n  def find_first_in_sorted(arr, x):\n      lo = 0\n      hi = len(arr)\n  \n      while lo <= hi:\n!         mid = (lo + hi) // 2\n  \n          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n              return mid\n--- 1,10 ----\n  def find_first_in_sorted(arr, x):\n+     return -1\n      lo = 0\n      hi = len(arr)\n  \n      while lo <= hi:\n! \n  \n          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n              return mid\n"}, {"BestPatch": "LineReplacement({'target': ('find_first_in_sorted.py', 1), 'ingredient': ('find_first_in_sorted.py', 12)}) | LineInsertion({'target': ('find_first_in_sorted.py', 4), 'ingredient': ('find_first_in_sorted.py', 16), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 230, "Time": 52.220049142837524, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 1,7 ****\n  def find_first_in_sorted(arr, x):\n!     lo = 0\n      hi = len(arr)\n  \n      while lo <= hi:\n          mid = (lo + hi) // 2\n  \n--- 1,8 ----\n  def find_first_in_sorted(arr, x):\n! \n      hi = len(arr)\n  \n+     return -1\n      while lo <= hi:\n          mid = (lo + hi) // 2\n  \n"}, {"BestPatch": "LineDeletion({'target': ('find_first_in_sorted.py', 1)}) | LineReplacement({'target': ('find_first_in_sorted.py', 3), 'ingredient': ('find_first_in_sorted.py', 16)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 220, "Time": 32.233951807022095, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 1,7 ****\n  def find_first_in_sorted(arr, x):\n!     lo = 0\n      hi = len(arr)\n! \n      while lo <= hi:\n          mid = (lo + hi) // 2\n  \n--- 1,7 ----\n  def find_first_in_sorted(arr, x):\n! \n      hi = len(arr)\n!     return -1\n      while lo <= hi:\n          mid = (lo + hi) // 2\n  \n"}, {"BestPatch": "LineDeletion({'target': ('find_first_in_sorted.py', 5)}) | LineReplacement({'target': ('find_first_in_sorted.py', 15), 'ingredient': ('find_first_in_sorted.py', 0)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 214, "Time": 32.215771436691284, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 3,9 ****\n      hi = len(arr)\n  \n      while lo <= hi:\n!         mid = (lo + hi) // 2\n  \n          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n              return mid\n--- 3,9 ----\n      hi = len(arr)\n  \n      while lo <= hi:\n! \n  \n          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n              return mid\n***************\n*** 13,17 ****\n  \n          else:\n              lo = mid + 1\n! \n      return -1\n--- 13,17 ----\n  \n          else:\n              lo = mid + 1\n! def find_first_in_sorted(arr, x):\n      return -1\n"}, {"BestPatch": "LineReplacement({'target': ('find_first_in_sorted.py', 5), 'ingredient': ('find_first_in_sorted.py', 12)}) | LineInsertion({'target': ('find_first_in_sorted.py', 1), 'ingredient': ('find_first_in_sorted.py', 16), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 231, "Time": 122.14661931991577, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 1,9 ****\n  def find_first_in_sorted(arr, x):\n      lo = 0\n      hi = len(arr)\n  \n      while lo <= hi:\n!         mid = (lo + hi) // 2\n  \n          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n              return mid\n--- 1,10 ----\n  def find_first_in_sorted(arr, x):\n+     return -1\n      lo = 0\n      hi = len(arr)\n  \n      while lo <= hi:\n! \n  \n          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n              return mid\n"}, {"BestPatch": "LineDeletion({'target': ('find_first_in_sorted.py', 1)}) | LineInsertion({'target': ('find_first_in_sorted.py', 16), 'ingredient': ('find_first_in_sorted.py', 0), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 268, "Time": 271.9522895812988, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 1,5 ****\n  def find_first_in_sorted(arr, x):\n!     lo = 0\n      hi = len(arr)\n  \n      while lo <= hi:\n--- 1,5 ----\n  def find_first_in_sorted(arr, x):\n! \n      hi = len(arr)\n  \n      while lo <= hi:\n***************\n*** 14,17 ****\n--- 14,18 ----\n          else:\n              lo = mid + 1\n  \n+ def find_first_in_sorted(arr, x):\n      return -1\n"}, {"BestPatch": "LineDeletion({'target': ('find_first_in_sorted.py', 10)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 273, "Time": 781.425347328186, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 8,14 ****\n          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n              return mid\n  \n!         elif x <= arr[mid]:\n              hi = mid\n  \n          else:\n--- 8,14 ----\n          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n              return mid\n  \n! \n              hi = mid\n  \n          else:\n"}, {"BestPatch": "LineDeletion({'target': ('find_first_in_sorted.py', 2)}) | LineReplacement({'target': ('find_first_in_sorted.py', 1), 'ingredient': ('find_first_in_sorted.py', 16)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 275, "Time": 561.5230054855347, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 1,6 ****\n  def find_first_in_sorted(arr, x):\n!     lo = 0\n!     hi = len(arr)\n  \n      while lo <= hi:\n          mid = (lo + hi) // 2\n--- 1,6 ----\n  def find_first_in_sorted(arr, x):\n!     return -1\n! \n  \n      while lo <= hi:\n          mid = (lo + hi) // 2\n"}, {"BestPatch": "LineInsertion({'target': ('find_first_in_sorted.py', 16), 'ingredient': ('find_first_in_sorted.py', 0), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 293, "Time": 621.4133698940277, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 14,17 ****\n--- 14,18 ----\n          else:\n              lo = mid + 1\n  \n+ def find_first_in_sorted(arr, x):\n      return -1\n"}, {"BestPatch": "LineDeletion({'target': ('find_first_in_sorted.py', 10)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 275, "Time": 891.5781714916229, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 8,14 ****\n          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n              return mid\n  \n!         elif x <= arr[mid]:\n              hi = mid\n  \n          else:\n--- 8,14 ----\n          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n              return mid\n  \n! \n              hi = mid\n  \n          else:\n"}, {"BestPatch": "LineReplacement({'target': ('find_first_in_sorted.py', 10), 'ingredient': ('find_first_in_sorted.py', 6)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 262, "Time": 721.8124098777771, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 8,14 ****\n          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n              return mid\n  \n!         elif x <= arr[mid]:\n              hi = mid\n  \n          else:\n--- 8,14 ----\n          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n              return mid\n  \n! \n              hi = mid\n  \n          else:\n"}, {"BestPatch": "LineDeletion({'target': ('find_first_in_sorted.py', 10)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 271, "Time": 981.4176788330078, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 8,14 ****\n          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n              return mid\n  \n!         elif x <= arr[mid]:\n              hi = mid\n  \n          else:\n--- 8,14 ----\n          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n              return mid\n  \n! \n              hi = mid\n  \n          else:\n"}, {"BestPatch": "LineInsertion({'target': ('find_first_in_sorted.py', 11), 'ingredient': ('find_first_in_sorted.py', 14), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 303, "Time": 741.3639781475067, "BestFitness": 2.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 9,14 ****\n--- 9,15 ----\n              return mid\n  \n          elif x <= arr[mid]:\n+             lo = mid + 1\n              hi = mid\n  \n          else:\n"}, {"BestPatch": "LineDeletion({'target': ('find_first_in_sorted.py', 2)}) | LineInsertion({'target': ('find_first_in_sorted.py', 1), 'ingredient': ('find_first_in_sorted.py', 16), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 251, "Time": 162.06752800941467, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 1,6 ****\n  def find_first_in_sorted(arr, x):\n      lo = 0\n!     hi = len(arr)\n  \n      while lo <= hi:\n          mid = (lo + hi) // 2\n--- 1,7 ----\n  def find_first_in_sorted(arr, x):\n+     return -1\n      lo = 0\n! \n  \n      while lo <= hi:\n          mid = (lo + hi) // 2\n"}, {"BestPatch": "LineDeletion({'target': ('find_first_in_sorted.py', 1)}) | LineReplacement({'target': ('find_first_in_sorted.py', 2), 'ingredient': ('find_first_in_sorted.py', 16)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 236, "Time": 132.10645604133606, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 1,6 ****\n  def find_first_in_sorted(arr, x):\n!     lo = 0\n!     hi = len(arr)\n  \n      while lo <= hi:\n          mid = (lo + hi) // 2\n--- 1,6 ----\n  def find_first_in_sorted(arr, x):\n! \n!     return -1\n  \n      while lo <= hi:\n          mid = (lo + hi) // 2\n"}]