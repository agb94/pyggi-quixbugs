[{"BestPatch": "StmtReplacement({'target': ('sieve.py', 3), 'ingredient': ('sieve.py', 4)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 68, "Time": 12.500404119491577, "BestFitness": 4.0, "diff": "*** before: sieve.py\n--- after: sieve.py\n***************\n*** 1,6 ****\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n!         if any(n % p > 0 for p in primes):\n!             primes.append(n)\n      return primes\n--- 1,5 ----\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n!         primes.append(n)\n      return primes\n"}, {"BestPatch": "StmtInsertion({'target': ('sieve.py', 3), 'ingredient': ('sieve.py', 4), 'direction': 'before'}) | StmtReplacement({'target': ('sieve.py', 4), 'ingredient': ('sieve.py', 5)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 61, "Time": 12.627455472946167, "BestFitness": 3.0, "diff": "*** before: sieve.py\n--- after: sieve.py\n***************\n*** 1,6 ****\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n          if any(n % p > 0 for p in primes):\n!             primes.append(n)\n      return primes\n--- 1,7 ----\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n+         primes.append(n)\n          if any(n % p > 0 for p in primes):\n!             return primes\n      return primes\n"}, {"BestPatch": "StmtReplacement({'target': ('sieve.py', 3), 'ingredient': ('sieve.py', 4)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 79, "Time": 12.549877405166626, "BestFitness": 4.0, "diff": "*** before: sieve.py\n--- after: sieve.py\n***************\n*** 1,6 ****\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n!         if any(n % p > 0 for p in primes):\n!             primes.append(n)\n      return primes\n--- 1,5 ----\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n!         primes.append(n)\n      return primes\n"}, {"BestPatch": "StmtInsertion({'target': ('sieve.py', 3), 'ingredient': ('sieve.py', 4), 'direction': 'before'}) | StmtReplacement({'target': ('sieve.py', 4), 'ingredient': ('sieve.py', 5)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 61, "Time": 12.665432691574097, "BestFitness": 3.0, "diff": "*** before: sieve.py\n--- after: sieve.py\n***************\n*** 1,6 ****\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n          if any(n % p > 0 for p in primes):\n!             primes.append(n)\n      return primes\n--- 1,7 ----\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n+         primes.append(n)\n          if any(n % p > 0 for p in primes):\n!             return primes\n      return primes\n"}, {"BestPatch": "StmtReplacement({'target': ('sieve.py', 3), 'ingredient': ('sieve.py', 4)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 58, "Time": 12.49140477180481, "BestFitness": 4.0, "diff": "*** before: sieve.py\n--- after: sieve.py\n***************\n*** 1,6 ****\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n!         if any(n % p > 0 for p in primes):\n!             primes.append(n)\n      return primes\n--- 1,5 ----\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n!         primes.append(n)\n      return primes\n"}, {"BestPatch": "StmtReplacement({'target': ('sieve.py', 3), 'ingredient': ('sieve.py', 4)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 53, "Time": 12.529375553131104, "BestFitness": 4.0, "diff": "*** before: sieve.py\n--- after: sieve.py\n***************\n*** 1,6 ****\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n!         if any(n % p > 0 for p in primes):\n!             primes.append(n)\n      return primes\n--- 1,5 ----\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n!         primes.append(n)\n      return primes\n"}, {"BestPatch": "StmtInsertion({'target': ('sieve.py', 3), 'ingredient': ('sieve.py', 4), 'direction': 'before'}) | StmtReplacement({'target': ('sieve.py', 4), 'ingredient': ('sieve.py', 5)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 55, "Time": 12.62096095085144, "BestFitness": 3.0, "diff": "*** before: sieve.py\n--- after: sieve.py\n***************\n*** 1,6 ****\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n          if any(n % p > 0 for p in primes):\n!             primes.append(n)\n      return primes\n--- 1,7 ----\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n+         primes.append(n)\n          if any(n % p > 0 for p in primes):\n!             return primes\n      return primes\n"}, {"BestPatch": "StmtInsertion({'target': ('sieve.py', 3), 'ingredient': ('sieve.py', 4), 'direction': 'before'}) | StmtInsertion({'target': ('sieve.py', 4), 'ingredient': ('sieve.py', 5), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 72, "Time": 12.584640741348267, "BestFitness": 3.0, "diff": "*** before: sieve.py\n--- after: sieve.py\n***************\n*** 1,6 ****\n--- 1,8 ----\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n+         primes.append(n)\n          if any(n % p > 0 for p in primes):\n+             return primes\n              primes.append(n)\n      return primes\n"}, {"BestPatch": "StmtInsertion({'target': ('sieve.py', 3), 'ingredient': ('sieve.py', 4), 'direction': 'before'}) | StmtInsertion({'target': ('sieve.py', 4), 'ingredient': ('sieve.py', 5), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 59, "Time": 12.622931718826294, "BestFitness": 3.0, "diff": "*** before: sieve.py\n--- after: sieve.py\n***************\n*** 1,6 ****\n--- 1,8 ----\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n+         primes.append(n)\n          if any(n % p > 0 for p in primes):\n+             return primes\n              primes.append(n)\n      return primes\n"}, {"BestPatch": "StmtInsertion({'target': ('sieve.py', 3), 'ingredient': ('sieve.py', 4), 'direction': 'before'}) | StmtInsertion({'target': ('sieve.py', 4), 'ingredient': ('sieve.py', 5), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 50, "Time": 12.608012914657593, "BestFitness": 3.0, "diff": "*** before: sieve.py\n--- after: sieve.py\n***************\n*** 1,6 ****\n--- 1,8 ----\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n+         primes.append(n)\n          if any(n % p > 0 for p in primes):\n+             return primes\n              primes.append(n)\n      return primes\n"}, {"BestPatch": "StmtReplacement({'target': ('sieve.py', 3), 'ingredient': ('sieve.py', 4)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 70, "Time": 12.539575576782227, "BestFitness": 4.0, "diff": "*** before: sieve.py\n--- after: sieve.py\n***************\n*** 1,6 ****\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n!         if any(n % p > 0 for p in primes):\n!             primes.append(n)\n      return primes\n--- 1,5 ----\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n!         primes.append(n)\n      return primes\n"}, {"BestPatch": "StmtInsertion({'target': ('sieve.py', 3), 'ingredient': ('sieve.py', 4), 'direction': 'before'}) | StmtReplacement({'target': ('sieve.py', 4), 'ingredient': ('sieve.py', 5)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 83, "Time": 12.582507133483887, "BestFitness": 3.0, "diff": "*** before: sieve.py\n--- after: sieve.py\n***************\n*** 1,6 ****\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n          if any(n % p > 0 for p in primes):\n!             primes.append(n)\n      return primes\n--- 1,7 ----\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n+         primes.append(n)\n          if any(n % p > 0 for p in primes):\n!             return primes\n      return primes\n"}, {"BestPatch": "StmtInsertion({'target': ('sieve.py', 3), 'ingredient': ('sieve.py', 4), 'direction': 'before'}) | StmtReplacement({'target': ('sieve.py', 4), 'ingredient': ('sieve.py', 5)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 64, "Time": 12.608088970184326, "BestFitness": 3.0, "diff": "*** before: sieve.py\n--- after: sieve.py\n***************\n*** 1,6 ****\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n          if any(n % p > 0 for p in primes):\n!             primes.append(n)\n      return primes\n--- 1,7 ----\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n+         primes.append(n)\n          if any(n % p > 0 for p in primes):\n!             return primes\n      return primes\n"}, {"BestPatch": "StmtReplacement({'target': ('sieve.py', 3), 'ingredient': ('sieve.py', 4)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 65, "Time": 12.511545896530151, "BestFitness": 4.0, "diff": "*** before: sieve.py\n--- after: sieve.py\n***************\n*** 1,6 ****\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n!         if any(n % p > 0 for p in primes):\n!             primes.append(n)\n      return primes\n--- 1,5 ----\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n!         primes.append(n)\n      return primes\n"}, {"BestPatch": "StmtReplacement({'target': ('sieve.py', 3), 'ingredient': ('sieve.py', 4)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 54, "Time": 12.545647621154785, "BestFitness": 4.0, "diff": "*** before: sieve.py\n--- after: sieve.py\n***************\n*** 1,6 ****\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n!         if any(n % p > 0 for p in primes):\n!             primes.append(n)\n      return primes\n--- 1,5 ----\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n!         primes.append(n)\n      return primes\n"}, {"BestPatch": "StmtInsertion({'target': ('sieve.py', 3), 'ingredient': ('sieve.py', 4), 'direction': 'before'}) | StmtReplacement({'target': ('sieve.py', 4), 'ingredient': ('sieve.py', 5)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 63, "Time": 12.630452871322632, "BestFitness": 3.0, "diff": "*** before: sieve.py\n--- after: sieve.py\n***************\n*** 1,6 ****\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n          if any(n % p > 0 for p in primes):\n!             primes.append(n)\n      return primes\n--- 1,7 ----\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n+         primes.append(n)\n          if any(n % p > 0 for p in primes):\n!             return primes\n      return primes\n"}, {"BestPatch": "StmtInsertion({'target': ('sieve.py', 3), 'ingredient': ('sieve.py', 4), 'direction': 'before'}) | StmtReplacement({'target': ('sieve.py', 4), 'ingredient': ('sieve.py', 5)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 63, "Time": 12.586593389511108, "BestFitness": 3.0, "diff": "*** before: sieve.py\n--- after: sieve.py\n***************\n*** 1,6 ****\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n          if any(n % p > 0 for p in primes):\n!             primes.append(n)\n      return primes\n--- 1,7 ----\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n+         primes.append(n)\n          if any(n % p > 0 for p in primes):\n!             return primes\n      return primes\n"}, {"BestPatch": "StmtInsertion({'target': ('sieve.py', 3), 'ingredient': ('sieve.py', 4), 'direction': 'before'}) | StmtReplacement({'target': ('sieve.py', 4), 'ingredient': ('sieve.py', 5)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 76, "Time": 12.612750768661499, "BestFitness": 3.0, "diff": "*** before: sieve.py\n--- after: sieve.py\n***************\n*** 1,6 ****\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n          if any(n % p > 0 for p in primes):\n!             primes.append(n)\n      return primes\n--- 1,7 ----\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n+         primes.append(n)\n          if any(n % p > 0 for p in primes):\n!             return primes\n      return primes\n"}, {"BestPatch": "StmtReplacement({'target': ('sieve.py', 3), 'ingredient': ('sieve.py', 4)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 67, "Time": 12.528470993041992, "BestFitness": 4.0, "diff": "*** before: sieve.py\n--- after: sieve.py\n***************\n*** 1,6 ****\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n!         if any(n % p > 0 for p in primes):\n!             primes.append(n)\n      return primes\n--- 1,5 ----\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n!         primes.append(n)\n      return primes\n"}, {"BestPatch": "StmtReplacement({'target': ('sieve.py', 3), 'ingredient': ('sieve.py', 4)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 57, "Time": 12.523643970489502, "BestFitness": 4.0, "diff": "*** before: sieve.py\n--- after: sieve.py\n***************\n*** 1,6 ****\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n!         if any(n % p > 0 for p in primes):\n!             primes.append(n)\n      return primes\n--- 1,5 ----\n  def sieve(max):\n      primes = []\n      for n in range(2, max + 1):\n!         primes.append(n)\n      return primes\n"}]