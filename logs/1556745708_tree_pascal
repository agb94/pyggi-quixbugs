[{"BestPatch": "StmtInsertion({'target': ('pascal.py', 8), 'ingredient': ('pascal.py', 4), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 31, "Time": 13.033091306686401, "BestFitness": 3.0, "diff": "*** before: pascal.py\n--- after: pascal.py\n***************\n*** 6,10 ****\n--- 6,14 ----\n              upleft = rows[r - 1][c - 1] if c > 0 else 0\n              upright = rows[r - 1][c] if c < r else 0\n              row.append(upleft + upright)\n+         for c in range(0, r):\n+             upleft = rows[r - 1][c - 1] if c > 0 else 0\n+             upright = rows[r - 1][c] if c < r else 0\n+             row.append(upleft + upright)\n          rows.append(row)\n      return rows\n"}, {"BestPatch": "StmtInsertion({'target': ('pascal.py', 5), 'ingredient': ('pascal.py', 4), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 44, "Time": 13.091482639312744, "BestFitness": 3.0, "diff": "*** before: pascal.py\n--- after: pascal.py\n***************\n*** 3,8 ****\n--- 3,12 ----\n      for r in range(1, n):\n          row = []\n          for c in range(0, r):\n+             for c in range(0, r):\n+                 upleft = rows[r - 1][c - 1] if c > 0 else 0\n+                 upright = rows[r - 1][c] if c < r else 0\n+                 row.append(upleft + upright)\n              upleft = rows[r - 1][c - 1] if c > 0 else 0\n              upright = rows[r - 1][c] if c < r else 0\n              row.append(upleft + upright)\n"}, {"BestPatch": "StmtInsertion({'target': ('pascal.py', 7), 'ingredient': ('pascal.py', 4), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 34, "Time": 13.049093961715698, "BestFitness": 3.0, "diff": "*** before: pascal.py\n--- after: pascal.py\n***************\n*** 5,10 ****\n--- 5,14 ----\n          for c in range(0, r):\n              upleft = rows[r - 1][c - 1] if c > 0 else 0\n              upright = rows[r - 1][c] if c < r else 0\n+             for c in range(0, r):\n+                 upleft = rows[r - 1][c - 1] if c > 0 else 0\n+                 upright = rows[r - 1][c] if c < r else 0\n+                 row.append(upleft + upright)\n              row.append(upleft + upright)\n          rows.append(row)\n      return rows\n"}, {"BestPatch": "StmtInsertion({'target': ('pascal.py', 6), 'ingredient': ('pascal.py', 4), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 46, "Time": 13.04469084739685, "BestFitness": 3.0, "diff": "*** before: pascal.py\n--- after: pascal.py\n***************\n*** 4,9 ****\n--- 4,13 ----\n          row = []\n          for c in range(0, r):\n              upleft = rows[r - 1][c - 1] if c > 0 else 0\n+             for c in range(0, r):\n+                 upleft = rows[r - 1][c - 1] if c > 0 else 0\n+                 upright = rows[r - 1][c] if c < r else 0\n+                 row.append(upleft + upright)\n              upright = rows[r - 1][c] if c < r else 0\n              row.append(upleft + upright)\n          rows.append(row)\n"}, {"BestPatch": "StmtReplacement({'target': ('pascal.py', 6), 'ingredient': ('pascal.py', 4)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 41, "Time": 13.032531976699829, "BestFitness": 3.0, "diff": "*** before: pascal.py\n--- after: pascal.py\n***************\n*** 4,10 ****\n          row = []\n          for c in range(0, r):\n              upleft = rows[r - 1][c - 1] if c > 0 else 0\n!             upright = rows[r - 1][c] if c < r else 0\n              row.append(upleft + upright)\n          rows.append(row)\n      return rows\n--- 4,13 ----\n          row = []\n          for c in range(0, r):\n              upleft = rows[r - 1][c - 1] if c > 0 else 0\n!             for c in range(0, r):\n!                 upleft = rows[r - 1][c - 1] if c > 0 else 0\n!                 upright = rows[r - 1][c] if c < r else 0\n!                 row.append(upleft + upright)\n              row.append(upleft + upright)\n          rows.append(row)\n      return rows\n"}, {"BestPatch": "StmtReplacement({'target': ('pascal.py', 5), 'ingredient': ('pascal.py', 4)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 47, "Time": 13.05482792854309, "BestFitness": 3.0, "diff": "*** before: pascal.py\n--- after: pascal.py\n***************\n*** 3,9 ****\n      for r in range(1, n):\n          row = []\n          for c in range(0, r):\n!             upleft = rows[r - 1][c - 1] if c > 0 else 0\n              upright = rows[r - 1][c] if c < r else 0\n              row.append(upleft + upright)\n          rows.append(row)\n--- 3,12 ----\n      for r in range(1, n):\n          row = []\n          for c in range(0, r):\n!             for c in range(0, r):\n!                 upleft = rows[r - 1][c - 1] if c > 0 else 0\n!                 upright = rows[r - 1][c] if c < r else 0\n!                 row.append(upleft + upright)\n              upright = rows[r - 1][c] if c < r else 0\n              row.append(upleft + upright)\n          rows.append(row)\n"}, {"BestPatch": "StmtInsertion({'target': ('pascal.py', 4), 'ingredient': ('pascal.py', 4), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 46, "Time": 13.03601336479187, "BestFitness": 3.0, "diff": "*** before: pascal.py\n--- after: pascal.py\n***************\n*** 6,10 ****\n--- 6,14 ----\n              upleft = rows[r - 1][c - 1] if c > 0 else 0\n              upright = rows[r - 1][c] if c < r else 0\n              row.append(upleft + upright)\n+         for c in range(0, r):\n+             upleft = rows[r - 1][c - 1] if c > 0 else 0\n+             upright = rows[r - 1][c] if c < r else 0\n+             row.append(upleft + upright)\n          rows.append(row)\n      return rows\n"}, {"BestPatch": "StmtInsertion({'target': ('pascal.py', 6), 'ingredient': ('pascal.py', 4), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 30, "Time": 13.052530288696289, "BestFitness": 3.0, "diff": "*** before: pascal.py\n--- after: pascal.py\n***************\n*** 4,9 ****\n--- 4,13 ----\n          row = []\n          for c in range(0, r):\n              upleft = rows[r - 1][c - 1] if c > 0 else 0\n+             for c in range(0, r):\n+                 upleft = rows[r - 1][c - 1] if c > 0 else 0\n+                 upright = rows[r - 1][c] if c < r else 0\n+                 row.append(upleft + upright)\n              upright = rows[r - 1][c] if c < r else 0\n              row.append(upleft + upright)\n          rows.append(row)\n"}, {"BestPatch": "StmtInsertion({'target': ('pascal.py', 4), 'ingredient': ('pascal.py', 4), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 36, "Time": 13.09043288230896, "BestFitness": 3.0, "diff": "*** before: pascal.py\n--- after: pascal.py\n***************\n*** 6,10 ****\n--- 6,14 ----\n              upleft = rows[r - 1][c - 1] if c > 0 else 0\n              upright = rows[r - 1][c] if c < r else 0\n              row.append(upleft + upright)\n+         for c in range(0, r):\n+             upleft = rows[r - 1][c - 1] if c > 0 else 0\n+             upright = rows[r - 1][c] if c < r else 0\n+             row.append(upleft + upright)\n          rows.append(row)\n      return rows\n"}, {"BestPatch": "StmtInsertion({'target': ('pascal.py', 7), 'ingredient': ('pascal.py', 4), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 35, "Time": 13.062050819396973, "BestFitness": 3.0, "diff": "*** before: pascal.py\n--- after: pascal.py\n***************\n*** 5,10 ****\n--- 5,14 ----\n          for c in range(0, r):\n              upleft = rows[r - 1][c - 1] if c > 0 else 0\n              upright = rows[r - 1][c] if c < r else 0\n+             for c in range(0, r):\n+                 upleft = rows[r - 1][c - 1] if c > 0 else 0\n+                 upright = rows[r - 1][c] if c < r else 0\n+                 row.append(upleft + upright)\n              row.append(upleft + upright)\n          rows.append(row)\n      return rows\n"}, {"BestPatch": "StmtReplacement({'target': ('pascal.py', 6), 'ingredient': ('pascal.py', 4)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 38, "Time": 13.048274993896484, "BestFitness": 3.0, "diff": "*** before: pascal.py\n--- after: pascal.py\n***************\n*** 4,10 ****\n          row = []\n          for c in range(0, r):\n              upleft = rows[r - 1][c - 1] if c > 0 else 0\n!             upright = rows[r - 1][c] if c < r else 0\n              row.append(upleft + upright)\n          rows.append(row)\n      return rows\n--- 4,13 ----\n          row = []\n          for c in range(0, r):\n              upleft = rows[r - 1][c - 1] if c > 0 else 0\n!             for c in range(0, r):\n!                 upleft = rows[r - 1][c - 1] if c > 0 else 0\n!                 upright = rows[r - 1][c] if c < r else 0\n!                 row.append(upleft + upright)\n              row.append(upleft + upright)\n          rows.append(row)\n      return rows\n"}, {"BestPatch": "StmtInsertion({'target': ('pascal.py', 8), 'ingredient': ('pascal.py', 4), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 37, "Time": 13.092639923095703, "BestFitness": 3.0, "diff": "*** before: pascal.py\n--- after: pascal.py\n***************\n*** 6,10 ****\n--- 6,14 ----\n              upleft = rows[r - 1][c - 1] if c > 0 else 0\n              upright = rows[r - 1][c] if c < r else 0\n              row.append(upleft + upright)\n+         for c in range(0, r):\n+             upleft = rows[r - 1][c - 1] if c > 0 else 0\n+             upright = rows[r - 1][c] if c < r else 0\n+             row.append(upleft + upright)\n          rows.append(row)\n      return rows\n"}, {"BestPatch": "StmtReplacement({'target': ('pascal.py', 5), 'ingredient': ('pascal.py', 4)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 41, "Time": 13.03027606010437, "BestFitness": 3.0, "diff": "*** before: pascal.py\n--- after: pascal.py\n***************\n*** 3,9 ****\n      for r in range(1, n):\n          row = []\n          for c in range(0, r):\n!             upleft = rows[r - 1][c - 1] if c > 0 else 0\n              upright = rows[r - 1][c] if c < r else 0\n              row.append(upleft + upright)\n          rows.append(row)\n--- 3,12 ----\n      for r in range(1, n):\n          row = []\n          for c in range(0, r):\n!             for c in range(0, r):\n!                 upleft = rows[r - 1][c - 1] if c > 0 else 0\n!                 upright = rows[r - 1][c] if c < r else 0\n!                 row.append(upleft + upright)\n              upright = rows[r - 1][c] if c < r else 0\n              row.append(upleft + upright)\n          rows.append(row)\n"}, {"BestPatch": "StmtInsertion({'target': ('pascal.py', 5), 'ingredient': ('pascal.py', 4), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 45, "Time": 13.06058955192566, "BestFitness": 3.0, "diff": "*** before: pascal.py\n--- after: pascal.py\n***************\n*** 3,8 ****\n--- 3,12 ----\n      for r in range(1, n):\n          row = []\n          for c in range(0, r):\n+             for c in range(0, r):\n+                 upleft = rows[r - 1][c - 1] if c > 0 else 0\n+                 upright = rows[r - 1][c] if c < r else 0\n+                 row.append(upleft + upright)\n              upleft = rows[r - 1][c - 1] if c > 0 else 0\n              upright = rows[r - 1][c] if c < r else 0\n              row.append(upleft + upright)\n"}, {"BestPatch": "StmtReplacement({'target': ('pascal.py', 6), 'ingredient': ('pascal.py', 4)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 39, "Time": 13.104580402374268, "BestFitness": 3.0, "diff": "*** before: pascal.py\n--- after: pascal.py\n***************\n*** 4,10 ****\n          row = []\n          for c in range(0, r):\n              upleft = rows[r - 1][c - 1] if c > 0 else 0\n!             upright = rows[r - 1][c] if c < r else 0\n              row.append(upleft + upright)\n          rows.append(row)\n      return rows\n--- 4,13 ----\n          row = []\n          for c in range(0, r):\n              upleft = rows[r - 1][c - 1] if c > 0 else 0\n!             for c in range(0, r):\n!                 upleft = rows[r - 1][c - 1] if c > 0 else 0\n!                 upright = rows[r - 1][c] if c < r else 0\n!                 row.append(upleft + upright)\n              row.append(upleft + upright)\n          rows.append(row)\n      return rows\n"}, {"BestPatch": "StmtInsertion({'target': ('pascal.py', 8), 'ingredient': ('pascal.py', 7), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 38, "Time": 12.922977209091187, "BestFitness": 3.0, "diff": "*** before: pascal.py\n--- after: pascal.py\n***************\n*** 6,10 ****\n--- 6,11 ----\n              upleft = rows[r - 1][c - 1] if c > 0 else 0\n              upright = rows[r - 1][c] if c < r else 0\n              row.append(upleft + upright)\n+         row.append(upleft + upright)\n          rows.append(row)\n      return rows\n"}, {"BestPatch": "StmtInsertion({'target': ('pascal.py', 8), 'ingredient': ('pascal.py', 4), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 44, "Time": 13.09579610824585, "BestFitness": 3.0, "diff": "*** before: pascal.py\n--- after: pascal.py\n***************\n*** 6,10 ****\n--- 6,14 ----\n              upleft = rows[r - 1][c - 1] if c > 0 else 0\n              upright = rows[r - 1][c] if c < r else 0\n              row.append(upleft + upright)\n+         for c in range(0, r):\n+             upleft = rows[r - 1][c - 1] if c > 0 else 0\n+             upright = rows[r - 1][c] if c < r else 0\n+             row.append(upleft + upright)\n          rows.append(row)\n      return rows\n"}, {"BestPatch": "StmtInsertion({'target': ('pascal.py', 8), 'ingredient': ('pascal.py', 7), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 43, "Time": 12.858937740325928, "BestFitness": 3.0, "diff": "*** before: pascal.py\n--- after: pascal.py\n***************\n*** 6,10 ****\n--- 6,11 ----\n              upleft = rows[r - 1][c - 1] if c > 0 else 0\n              upright = rows[r - 1][c] if c < r else 0\n              row.append(upleft + upright)\n+         row.append(upleft + upright)\n          rows.append(row)\n      return rows\n"}, {"BestPatch": "StmtInsertion({'target': ('pascal.py', 8), 'ingredient': ('pascal.py', 4), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 48, "Time": 12.961531400680542, "BestFitness": 3.0, "diff": "*** before: pascal.py\n--- after: pascal.py\n***************\n*** 6,10 ****\n--- 6,14 ----\n              upleft = rows[r - 1][c - 1] if c > 0 else 0\n              upright = rows[r - 1][c] if c < r else 0\n              row.append(upleft + upright)\n+         for c in range(0, r):\n+             upleft = rows[r - 1][c - 1] if c > 0 else 0\n+             upright = rows[r - 1][c] if c < r else 0\n+             row.append(upleft + upright)\n          rows.append(row)\n      return rows\n"}, {"BestPatch": "StmtInsertion({'target': ('pascal.py', 5), 'ingredient': ('pascal.py', 4), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 38, "Time": 13.129987955093384, "BestFitness": 3.0, "diff": "*** before: pascal.py\n--- after: pascal.py\n***************\n*** 3,8 ****\n--- 3,12 ----\n      for r in range(1, n):\n          row = []\n          for c in range(0, r):\n+             for c in range(0, r):\n+                 upleft = rows[r - 1][c - 1] if c > 0 else 0\n+                 upright = rows[r - 1][c] if c < r else 0\n+                 row.append(upleft + upright)\n              upleft = rows[r - 1][c - 1] if c > 0 else 0\n              upright = rows[r - 1][c] if c < r else 0\n              row.append(upleft + upright)\n"}]