[{"BestPatch": "StmtInsertion({'target': ('gcd.py', 3), 'ingredient': ('gcd.py', 2), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 85, "Time": 42.33892297744751, "BestFitness": 2.0, "diff": "*** before: gcd.py\n--- after: gcd.py\n***************\n*** 2,5 ****\n--- 2,6 ----\n      if b == 0:\n          return a\n      else:\n+         return a\n          return gcd(a % b, b)\n"}, {"BestPatch": "StmtReplacement({'target': ('gcd.py', 3), 'ingredient': ('gcd.py', 2)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 94, "Time": 42.17160415649414, "BestFitness": 2.0, "diff": "*** before: gcd.py\n--- after: gcd.py\n***************\n*** 2,5 ****\n      if b == 0:\n          return a\n      else:\n!         return gcd(a % b, b)\n--- 2,5 ----\n      if b == 0:\n          return a\n      else:\n!         return a\n"}, {"BestPatch": "StmtInsertion({'target': ('gcd.py', 1), 'ingredient': ('gcd.py', 2), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 96, "Time": 41.588189125061035, "BestFitness": 2.0, "diff": "*** before: gcd.py\n--- after: gcd.py\n***************\n*** 1,4 ****\n--- 1,5 ----\n  def gcd(a, b):\n+     return a\n      if b == 0:\n          return a\n      else:\n"}, {"BestPatch": "StmtInsertion({'target': ('gcd.py', 3), 'ingredient': ('gcd.py', 2), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 98, "Time": 42.76774978637695, "BestFitness": 2.0, "diff": "*** before: gcd.py\n--- after: gcd.py\n***************\n*** 2,5 ****\n--- 2,6 ----\n      if b == 0:\n          return a\n      else:\n+         return a\n          return gcd(a % b, b)\n"}, {"BestPatch": "StmtInsertion({'target': ('gcd.py', 3), 'ingredient': ('gcd.py', 2), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 94, "Time": 42.177300214767456, "BestFitness": 2.0, "diff": "*** before: gcd.py\n--- after: gcd.py\n***************\n*** 2,5 ****\n--- 2,6 ----\n      if b == 0:\n          return a\n      else:\n+         return a\n          return gcd(a % b, b)\n"}, {"BestPatch": "StmtReplacement({'target': ('gcd.py', 1), 'ingredient': ('gcd.py', 2)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 99, "Time": 41.807512521743774, "BestFitness": 2.0, "diff": "*** before: gcd.py\n--- after: gcd.py\n***************\n*** 1,5 ****\n  def gcd(a, b):\n!     if b == 0:\n!         return a\n!     else:\n!         return gcd(a % b, b)\n--- 1,2 ----\n  def gcd(a, b):\n!     return a\n"}, {"BestPatch": "StmtReplacement({'target': ('gcd.py', 1), 'ingredient': ('gcd.py', 2)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 98, "Time": 41.71923589706421, "BestFitness": 2.0, "diff": "*** before: gcd.py\n--- after: gcd.py\n***************\n*** 1,5 ****\n  def gcd(a, b):\n!     if b == 0:\n!         return a\n!     else:\n!         return gcd(a % b, b)\n--- 1,2 ----\n  def gcd(a, b):\n!     return a\n"}, {"BestPatch": "StmtReplacement({'target': ('gcd.py', 3), 'ingredient': ('gcd.py', 2)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 79, "Time": 42.242130756378174, "BestFitness": 2.0, "diff": "*** before: gcd.py\n--- after: gcd.py\n***************\n*** 2,5 ****\n      if b == 0:\n          return a\n      else:\n!         return gcd(a % b, b)\n--- 2,5 ----\n      if b == 0:\n          return a\n      else:\n!         return a\n"}, {"BestPatch": "StmtInsertion({'target': ('gcd.py', 3), 'ingredient': ('gcd.py', 2), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 101, "Time": 42.28469729423523, "BestFitness": 2.0, "diff": "*** before: gcd.py\n--- after: gcd.py\n***************\n*** 2,5 ****\n--- 2,6 ----\n      if b == 0:\n          return a\n      else:\n+         return a\n          return gcd(a % b, b)\n"}, {"BestPatch": "StmtReplacement({'target': ('gcd.py', 1), 'ingredient': ('gcd.py', 2)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 82, "Time": 41.78552722930908, "BestFitness": 2.0, "diff": "*** before: gcd.py\n--- after: gcd.py\n***************\n*** 1,5 ****\n  def gcd(a, b):\n!     if b == 0:\n!         return a\n!     else:\n!         return gcd(a % b, b)\n--- 1,2 ----\n  def gcd(a, b):\n!     return a\n"}, {"BestPatch": "StmtReplacement({'target': ('gcd.py', 1), 'ingredient': ('gcd.py', 2)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 96, "Time": 41.409525632858276, "BestFitness": 2.0, "diff": "*** before: gcd.py\n--- after: gcd.py\n***************\n*** 1,5 ****\n  def gcd(a, b):\n!     if b == 0:\n!         return a\n!     else:\n!         return gcd(a % b, b)\n--- 1,2 ----\n  def gcd(a, b):\n!     return a\n"}, {"BestPatch": "StmtInsertion({'target': ('gcd.py', 3), 'ingredient': ('gcd.py', 2), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 95, "Time": 42.39611482620239, "BestFitness": 2.0, "diff": "*** before: gcd.py\n--- after: gcd.py\n***************\n*** 2,5 ****\n--- 2,6 ----\n      if b == 0:\n          return a\n      else:\n+         return a\n          return gcd(a % b, b)\n"}, {"BestPatch": "StmtReplacement({'target': ('gcd.py', 3), 'ingredient': ('gcd.py', 2)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 97, "Time": 42.37866163253784, "BestFitness": 2.0, "diff": "*** before: gcd.py\n--- after: gcd.py\n***************\n*** 2,5 ****\n      if b == 0:\n          return a\n      else:\n!         return gcd(a % b, b)\n--- 2,5 ----\n      if b == 0:\n          return a\n      else:\n!         return a\n"}, {"BestPatch": "StmtReplacement({'target': ('gcd.py', 3), 'ingredient': ('gcd.py', 2)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 102, "Time": 42.26809310913086, "BestFitness": 2.0, "diff": "*** before: gcd.py\n--- after: gcd.py\n***************\n*** 2,5 ****\n      if b == 0:\n          return a\n      else:\n!         return gcd(a % b, b)\n--- 2,5 ----\n      if b == 0:\n          return a\n      else:\n!         return a\n"}, {"BestPatch": "StmtReplacement({'target': ('gcd.py', 3), 'ingredient': ('gcd.py', 2)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 100, "Time": 42.809674978256226, "BestFitness": 2.0, "diff": "*** before: gcd.py\n--- after: gcd.py\n***************\n*** 2,5 ****\n      if b == 0:\n          return a\n      else:\n!         return gcd(a % b, b)\n--- 2,5 ----\n      if b == 0:\n          return a\n      else:\n!         return a\n"}, {"BestPatch": "StmtReplacement({'target': ('gcd.py', 3), 'ingredient': ('gcd.py', 2)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 98, "Time": 42.39416241645813, "BestFitness": 2.0, "diff": "*** before: gcd.py\n--- after: gcd.py\n***************\n*** 2,5 ****\n      if b == 0:\n          return a\n      else:\n!         return gcd(a % b, b)\n--- 2,5 ----\n      if b == 0:\n          return a\n      else:\n!         return a\n"}, {"BestPatch": "StmtReplacement({'target': ('gcd.py', 1), 'ingredient': ('gcd.py', 2)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 94, "Time": 41.324060916900635, "BestFitness": 2.0, "diff": "*** before: gcd.py\n--- after: gcd.py\n***************\n*** 1,5 ****\n  def gcd(a, b):\n!     if b == 0:\n!         return a\n!     else:\n!         return gcd(a % b, b)\n--- 1,2 ----\n  def gcd(a, b):\n!     return a\n"}, {"BestPatch": "StmtReplacement({'target': ('gcd.py', 3), 'ingredient': ('gcd.py', 2)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 91, "Time": 41.78826451301575, "BestFitness": 2.0, "diff": "*** before: gcd.py\n--- after: gcd.py\n***************\n*** 2,5 ****\n      if b == 0:\n          return a\n      else:\n!         return gcd(a % b, b)\n--- 2,5 ----\n      if b == 0:\n          return a\n      else:\n!         return a\n"}, {"BestPatch": "StmtReplacement({'target': ('gcd.py', 1), 'ingredient': ('gcd.py', 2)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 109, "Time": 41.132317543029785, "BestFitness": 2.0, "diff": "*** before: gcd.py\n--- after: gcd.py\n***************\n*** 1,5 ****\n  def gcd(a, b):\n!     if b == 0:\n!         return a\n!     else:\n!         return gcd(a % b, b)\n--- 1,2 ----\n  def gcd(a, b):\n!     return a\n"}, {"BestPatch": "StmtInsertion({'target': ('gcd.py', 1), 'ingredient': ('gcd.py', 2), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 104, "Time": 42.3831353187561, "BestFitness": 2.0, "diff": "*** before: gcd.py\n--- after: gcd.py\n***************\n*** 1,4 ****\n--- 1,5 ----\n  def gcd(a, b):\n+     return a\n      if b == 0:\n          return a\n      else:\n"}]