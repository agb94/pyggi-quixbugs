[{"BestPatch": "StmtInsertion({'target': ('find_first_in_sorted.py', 3), 'ingredient': ('find_first_in_sorted.py', 5), 'direction': 'before'}) | StmtReplacement({'target': ('find_first_in_sorted.py', 2), 'ingredient': ('find_first_in_sorted.py', 10)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 37, "Time": 79.84387111663818, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 1,6 ****\n  def find_first_in_sorted(arr, x):\n      lo = 0\n!     hi = len(arr)\n      while lo <= hi:\n          mid = (lo + hi) // 2\n          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n--- 1,12 ----\n  def find_first_in_sorted(arr, x):\n      lo = 0\n!     return -1\n!     if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n!         return mid\n!     elif x <= arr[mid]:\n!         hi = mid\n!     else:\n!         lo = mid + 1\n      while lo <= hi:\n          mid = (lo + hi) // 2\n          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n"}, {"BestPatch": "StmtInsertion({'target': ('find_first_in_sorted.py', 3), 'ingredient': ('find_first_in_sorted.py', 8), 'direction': 'before'}) | StmtReplacement({'target': ('find_first_in_sorted.py', 1), 'ingredient': ('find_first_in_sorted.py', 10)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 46, "Time": 93.72848272323608, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 1,6 ****\n  def find_first_in_sorted(arr, x):\n!     lo = 0\n      hi = len(arr)\n      while lo <= hi:\n          mid = (lo + hi) // 2\n          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n--- 1,7 ----\n  def find_first_in_sorted(arr, x):\n!     return -1\n      hi = len(arr)\n+     hi = mid\n      while lo <= hi:\n          mid = (lo + hi) // 2\n          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n"}, {"BestPatch": "StmtReplacement({'target': ('find_first_in_sorted.py', 1), 'ingredient': ('find_first_in_sorted.py', 6)}) | StmtReplacement({'target': ('find_first_in_sorted.py', 1), 'ingredient': ('find_first_in_sorted.py', 10)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 52, "Time": 143.63955569267273, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 1,5 ****\n  def find_first_in_sorted(arr, x):\n!     lo = 0\n      hi = len(arr)\n      while lo <= hi:\n          mid = (lo + hi) // 2\n--- 1,5 ----\n  def find_first_in_sorted(arr, x):\n!     return -1\n      hi = len(arr)\n      while lo <= hi:\n          mid = (lo + hi) // 2\n"}, {"BestPatch": "StmtDeletion({'target': ('find_first_in_sorted.py', 2)}) | StmtDeletion({'target': ('find_first_in_sorted.py', 3)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 50, "Time": 43.2547173500061, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 1,12 ****\n  def find_first_in_sorted(arr, x):\n      lo = 0\n!     hi = len(arr)\n!     while lo <= hi:\n!         mid = (lo + hi) // 2\n!         if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n!             return mid\n!         elif x <= arr[mid]:\n!             hi = mid\n!         else:\n!             lo = mid + 1\n      return -1\n--- 1,5 ----\n  def find_first_in_sorted(arr, x):\n      lo = 0\n!     pass\n!     pass\n      return -1\n"}, {"BestPatch": "StmtReplacement({'target': ('find_first_in_sorted.py', 2), 'ingredient': ('find_first_in_sorted.py', 3)}) | StmtReplacement({'target': ('find_first_in_sorted.py', 1), 'ingredient': ('find_first_in_sorted.py', 10)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 36, "Time": 68.06216359138489, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 1,6 ****\n  def find_first_in_sorted(arr, x):\n!     lo = 0\n!     hi = len(arr)\n      while lo <= hi:\n          mid = (lo + hi) // 2\n          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n--- 1,13 ----\n  def find_first_in_sorted(arr, x):\n!     return -1\n!     while lo <= hi:\n!         mid = (lo + hi) // 2\n!         if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n!             return mid\n!         elif x <= arr[mid]:\n!             hi = mid\n!         else:\n!             lo = mid + 1\n      while lo <= hi:\n          mid = (lo + hi) // 2\n          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n"}, {"BestPatch": "StmtInsertion({'target': ('find_first_in_sorted.py', 8), 'ingredient': ('find_first_in_sorted.py', 6), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 178, "Time": 1305.1279921531677, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 6,11 ****\n--- 6,12 ----\n          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n              return mid\n          elif x <= arr[mid]:\n+             return mid\n              hi = mid\n          else:\n              lo = mid + 1\n"}, {"BestPatch": "StmtDeletion({'target': ('find_first_in_sorted.py', 2)}) | StmtReplacement({'target': ('find_first_in_sorted.py', 2), 'ingredient': ('find_first_in_sorted.py', 10)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 41, "Time": 82.72772979736328, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 1,6 ****\n  def find_first_in_sorted(arr, x):\n      lo = 0\n!     hi = len(arr)\n      while lo <= hi:\n          mid = (lo + hi) // 2\n          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n--- 1,6 ----\n  def find_first_in_sorted(arr, x):\n      lo = 0\n!     return -1\n      while lo <= hi:\n          mid = (lo + hi) // 2\n          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n"}, {"BestPatch": "StmtDeletion({'target': ('find_first_in_sorted.py', 4)}) | StmtDeletion({'target': ('find_first_in_sorted.py', 3)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 51, "Time": 110.46372556686401, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 1,12 ****\n  def find_first_in_sorted(arr, x):\n      lo = 0\n      hi = len(arr)\n!     while lo <= hi:\n!         mid = (lo + hi) // 2\n!         if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n!             return mid\n!         elif x <= arr[mid]:\n!             hi = mid\n!         else:\n!             lo = mid + 1\n      return -1\n--- 1,5 ----\n  def find_first_in_sorted(arr, x):\n      lo = 0\n      hi = len(arr)\n!     pass\n      return -1\n"}, {"BestPatch": "StmtReplacement({'target': ('find_first_in_sorted.py', 3), 'ingredient': ('find_first_in_sorted.py', 7)}) | StmtDeletion({'target': ('find_first_in_sorted.py', 3)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 33, "Time": 104.37093615531921, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 1,12 ****\n  def find_first_in_sorted(arr, x):\n      lo = 0\n      hi = len(arr)\n!     while lo <= hi:\n!         mid = (lo + hi) // 2\n!         if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n!             return mid\n!         elif x <= arr[mid]:\n!             hi = mid\n!         else:\n!             lo = mid + 1\n      return -1\n--- 1,5 ----\n  def find_first_in_sorted(arr, x):\n      lo = 0\n      hi = len(arr)\n!     pass\n      return -1\n"}, {"BestPatch": "StmtInsertion({'target': ('find_first_in_sorted.py', 2), 'ingredient': ('find_first_in_sorted.py', 7), 'direction': 'before'}) | StmtReplacement({'target': ('find_first_in_sorted.py', 1), 'ingredient': ('find_first_in_sorted.py', 10)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 62, "Time": 358.91387701034546, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 1,5 ****\n  def find_first_in_sorted(arr, x):\n!     lo = 0\n      hi = len(arr)\n      while lo <= hi:\n          mid = (lo + hi) // 2\n--- 1,9 ----\n  def find_first_in_sorted(arr, x):\n!     return -1\n!     if x <= arr[mid]:\n!         hi = mid\n!     else:\n!         lo = mid + 1\n      hi = len(arr)\n      while lo <= hi:\n          mid = (lo + hi) // 2\n"}, {"BestPatch": "StmtInsertion({'target': ('find_first_in_sorted.py', 2), 'ingredient': ('find_first_in_sorted.py', 7), 'direction': 'before'}) | StmtInsertion({'target': ('find_first_in_sorted.py', 1), 'ingredient': ('find_first_in_sorted.py', 10), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 74, "Time": 295.13034534454346, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 1,5 ****\n--- 1,10 ----\n  def find_first_in_sorted(arr, x):\n+     return -1\n      lo = 0\n+     if x <= arr[mid]:\n+         hi = mid\n+     else:\n+         lo = mid + 1\n      hi = len(arr)\n      while lo <= hi:\n          mid = (lo + hi) // 2\n"}, {"BestPatch": "StmtReplacement({'target': ('find_first_in_sorted.py', 4), 'ingredient': ('find_first_in_sorted.py', 10)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 85, "Time": 617.0857818126678, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 2,8 ****\n      lo = 0\n      hi = len(arr)\n      while lo <= hi:\n!         mid = (lo + hi) // 2\n          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n              return mid\n          elif x <= arr[mid]:\n--- 2,8 ----\n      lo = 0\n      hi = len(arr)\n      while lo <= hi:\n!         return -1\n          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n              return mid\n          elif x <= arr[mid]:\n"}, {"BestPatch": "StmtReplacement({'target': ('find_first_in_sorted.py', 1), 'ingredient': ('find_first_in_sorted.py', 9)}) | StmtReplacement({'target': ('find_first_in_sorted.py', 1), 'ingredient': ('find_first_in_sorted.py', 10)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 48, "Time": 63.51283502578735, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 1,5 ****\n  def find_first_in_sorted(arr, x):\n!     lo = 0\n      hi = len(arr)\n      while lo <= hi:\n          mid = (lo + hi) // 2\n--- 1,5 ----\n  def find_first_in_sorted(arr, x):\n!     return -1\n      hi = len(arr)\n      while lo <= hi:\n          mid = (lo + hi) // 2\n"}, {"BestPatch": "StmtReplacement({'target': ('find_first_in_sorted.py', 2), 'ingredient': ('find_first_in_sorted.py', 5)}) | StmtReplacement({'target': ('find_first_in_sorted.py', 2), 'ingredient': ('find_first_in_sorted.py', 10)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 54, "Time": 179.04625034332275, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 1,6 ****\n  def find_first_in_sorted(arr, x):\n      lo = 0\n!     hi = len(arr)\n      while lo <= hi:\n          mid = (lo + hi) // 2\n          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n--- 1,6 ----\n  def find_first_in_sorted(arr, x):\n      lo = 0\n!     return -1\n      while lo <= hi:\n          mid = (lo + hi) // 2\n          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n"}, {"BestPatch": "StmtReplacement({'target': ('find_first_in_sorted.py', 4), 'ingredient': ('find_first_in_sorted.py', 1)}) | StmtReplacement({'target': ('find_first_in_sorted.py', 3), 'ingredient': ('find_first_in_sorted.py', 10)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 34, "Time": 106.79043221473694, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 1,12 ****\n  def find_first_in_sorted(arr, x):\n      lo = 0\n      hi = len(arr)\n-     while lo <= hi:\n-         mid = (lo + hi) // 2\n-         if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n-             return mid\n-         elif x <= arr[mid]:\n-             hi = mid\n-         else:\n-             lo = mid + 1\n      return -1\n--- 1,5 ----\n  def find_first_in_sorted(arr, x):\n      lo = 0\n      hi = len(arr)\n      return -1\n+     return -1\n"}, {"BestPatch": "StmtInsertion({'target': ('find_first_in_sorted.py', 7), 'ingredient': ('find_first_in_sorted.py', 10), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 111, "Time": 798.1816854476929, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 5,12 ****\n          mid = (lo + hi) // 2\n          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n              return mid\n-         elif x <= arr[mid]:\n-             hi = mid\n          else:\n!             lo = mid + 1\n      return -1\n--- 5,14 ----\n          mid = (lo + hi) // 2\n          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n              return mid\n          else:\n!             return -1\n!             if x <= arr[mid]:\n!                 hi = mid\n!             else:\n!                 lo = mid + 1\n      return -1\n"}, {"BestPatch": "StmtInsertion({'target': ('find_first_in_sorted.py', 3), 'ingredient': ('find_first_in_sorted.py', 9), 'direction': 'before'}) | StmtReplacement({'target': ('find_first_in_sorted.py', 1), 'ingredient': ('find_first_in_sorted.py', 10)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 39, "Time": 105.57609224319458, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 1,6 ****\n  def find_first_in_sorted(arr, x):\n!     lo = 0\n      hi = len(arr)\n      while lo <= hi:\n          mid = (lo + hi) // 2\n          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n--- 1,7 ----\n  def find_first_in_sorted(arr, x):\n!     return -1\n      hi = len(arr)\n+     lo = mid + 1\n      while lo <= hi:\n          mid = (lo + hi) // 2\n          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n"}, {"BestPatch": "StmtInsertion({'target': ('find_first_in_sorted.py', 1), 'ingredient': ('find_first_in_sorted.py', 4), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 94, "Time": 549.6720099449158, "BestFitness": 7.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 1,4 ****\n--- 1,5 ----\n  def find_first_in_sorted(arr, x):\n+     mid = (lo + hi) // 2\n      lo = 0\n      hi = len(arr)\n      while lo <= hi:\n"}, {"BestPatch": "StmtInsertion({'target': ('find_first_in_sorted.py', 1), 'ingredient': ('find_first_in_sorted.py', 5), 'direction': 'before'})", "Success": false, "FitnessEval": 500, "InvalidPatch": 88, "Time": 412.60070061683655, "BestFitness": 7.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 1,4 ****\n--- 1,10 ----\n  def find_first_in_sorted(arr, x):\n+     if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n+         return mid\n+     elif x <= arr[mid]:\n+         hi = mid\n+     else:\n+         lo = mid + 1\n      lo = 0\n      hi = len(arr)\n      while lo <= hi:\n"}, {"BestPatch": "StmtReplacement({'target': ('find_first_in_sorted.py', 4), 'ingredient': ('find_first_in_sorted.py', 7)}) | StmtDeletion({'target': ('find_first_in_sorted.py', 3)})", "Success": false, "FitnessEval": 500, "InvalidPatch": 45, "Time": 162.52907943725586, "BestFitness": 4.0, "diff": "*** before: find_first_in_sorted.py\n--- after: find_first_in_sorted.py\n***************\n*** 1,12 ****\n  def find_first_in_sorted(arr, x):\n      lo = 0\n      hi = len(arr)\n!     while lo <= hi:\n!         mid = (lo + hi) // 2\n!         if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n!             return mid\n!         elif x <= arr[mid]:\n!             hi = mid\n!         else:\n!             lo = mid + 1\n      return -1\n--- 1,5 ----\n  def find_first_in_sorted(arr, x):\n      lo = 0\n      hi = len(arr)\n!     pass\n      return -1\n"}]